;****************************************************************************
; InitPlatformSpawner
; Initializes a platform spawner object.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitPlatformSpawner:
    move.w  #$40, OBJ_TIMER(a6)         ; Time for first platform
    rts                                 ; End of subroutine

;****************************************************************************
; RunPlatformSpawner
; Spawns platforms every so often.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformSpawner:
    subq.w  #1, OBJ_TIMER(a0)           ; Keep waiting?
    beq.s   @Trigger
    rts

@Trigger:
    moveq   #0, d5                      ; Spawn object
    move.b  OBJ_FLAGS(a0), d5
    move.w  OBJ_X(a0), d7
    move.w  OBJ_Y(a0), d6
    bsr     AddObject
    
    move.w  #$40, OBJ_TIMER(a0)         ; Wait for next platform
    rts                                 ; End of subroutine

;****************************************************************************
; RunPlatformUpwards
; Executes the behavior for a platform that moves upwards.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformUpwards:
    move.w  OBJ_Y(a0), d7               ; Move upwards
    subq.w  #1, d7
    move.w  d7, OBJ_Y(a0)
    
    cmp.w   #-$10, d7                   ; Too far?
    blt     DestroySelf
    
    bra     RunPlatformCommon           ; Now do platformy stuff

;****************************************************************************
; RunPlatformDownwards
; Executes the behavior for a platform that moves downwards.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformDownwards:
    move.w  OBJ_Y(a0), d7               ; Move downwards
    addq.w  #1, d7
    move.w  d7, OBJ_Y(a0)
    
    move.w  (MapBottom), d6             ; Too far?
    add.w   #$10, d6
    cmp.w   d6, d7
    bgt     DestroySelf
    
    bra     RunPlatformCommon           ; Now do platformy stuff

;****************************************************************************
; RunPlatformCommon
; Common behavior for all platform types.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformCommon:
    move.w  OBJ_X(a0), d0               ; Get player and player status
    move.w  OBJ_Y(a0), d1
    move.w  (PlayerX), d2
    move.w  (PlayerY), d3
    move.b  OBJ_FLAGS(a0), d4
    move.b  (PlayerFlags), d5
    
    btst.l  #OF_ACTIVE, d4              ; Is it active?
    bne.s   @Active
    
    tst.w   (PlayerYSpeed)              ; Players can through the bottom
    blt.s   @StillOff
    
    move.w  d0, d7                      ; Should platform trigger?
    sub.w   #$20, d7
    cmp.w   d7, d2
    blt.s   @StillOff
    add.w   #$3F, d7
    cmp.w   d7, d2
    bgt.s   @StillOff
    move.w  d1, d7
    sub.w   #$10+4, d7
    cmp.w   d7, d3
    blt.s   @StillOff
    addq.w  #8, d7
    cmp.w   d7, d3
    bgt.s   @StillOff
    
    bset.l  #OF_ACTIVE, d4              ; Activate the platform
    bset.l  #PF_LANDED, d5
    bset.l  #PF_PLATFORM, d5
    move.b  d4, OBJ_FLAGS(a0)
    move.b  d5, (PlayerFlags)
    clr.w   (PlayerYSpeed)
    
    sub.w   #$10+$08, d1                ; Put player on the platform
    move.w  d1, (PlayerY)
    
@StillOff:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Active:
    btst.l  #PF_PLATFORM, d5            ; Make sure it's *really* active
    bne.s   @YesSeriously
    bclr.l  #OF_ACTIVE, d4
    move.b  d4, OBJ_FLAGS(a0)
    rts
@YesSeriously:
    
    sub.w   #$10+$08, d1                ; Keep player on the platform
    move.w  d1, (PlayerY)
    clr.w   (PlayerYSpeed)
    
    move.w  d0, d7                      ; Is the player still on it?
    sub.w   #$20, d7
    cmp.w   d7, d2
    blt.s   @Deactivate
    add.w   #$3F, d7
    cmp.w   d7, d2
    bgt.s   @Deactivate
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Deactivate:
    bclr.l  #OF_ACTIVE, d4
    bclr.l  #PF_PLATFORM, d5
    move.b  d4, OBJ_FLAGS(a0)
    move.b  d5, (PlayerFlags)
    rts

;****************************************************************************
; DrawPlatform
; Draws a platform.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawPlatform:
    move.w  OBJ_X(a0), d0               ; Determine position on screen
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    lea     (SprPlatform_Idle), a6      ; Check which sprite to use
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)     ; This is for the tilting look
    beq.s   @NotSteppedOn
    move.w  (PlayerX), d7
    sub.w   OBJ_X(a0), d7
    add.w   #$20, d7
    lsr.w   #1, d7
    and.w   #$07<<2, d7
    lea     @Tilting(pc), a6
    move.l  (a6,d7.w), a6
@NotSteppedOn:
    
    move.w  #$2000+VramPlatform, d2     ; Draw platform
    jsr     (AddMetasprite).w
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Tilting:
    dcb.l   3, SprPlatform_Left
    dcb.l   2, SprPlatform_Middle
    dcb.l   3, SprPlatform_Right
