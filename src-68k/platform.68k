;****************************************************************************
; InitPlatformSpawner
; Initializes a platform spawner object.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitPlatformSpawner:
    move.w  #$40, OBJ_TIMER(a6)         ; Time for first platform
    rts                                 ; End of subroutine

;****************************************************************************
; RunPlatformSpawner
; Spawns platforms every so often.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformSpawner:
    subq.w  #1, OBJ_TIMER(a0)           ; Keep waiting?
    beq.s   @Trigger
    rts

@Trigger:
    moveq   #0, d5                      ; Spawn object
    move.b  OBJ_FLAGS(a0), d5
    move.w  OBJ_X(a0), d7
    move.w  OBJ_Y(a0), d6
    bsr     AddObject
    
    move.w  #$40, OBJ_TIMER(a0)         ; Wait for next platform
    rts                                 ; End of subroutine

;****************************************************************************
; RunPlatformUpwards
; Executes the behavior for a platform that moves upwards.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformUpwards:
    move.w  OBJ_Y(a0), d7               ; Move upwards
    subq.w  #1, d7
    move.w  d7, OBJ_Y(a0)
    
    cmp.w   #-$10, d7                   ; Too far?
    blt     DestroySelf
    
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)   ; Prevent players from going into
    beq.s   @NoCeilCheck                  ; the ceiling
    move.w  (PlayerX), d7
    move.w  (PlayerY), d6
    add.w   #PLAYER_Y1-1, d6
    bsr     TileAt
    cmp.b   #COLL_SOLID, d6
    bne.s   @NoCeilCheck
    bset.b  #OF_DISABLED, OBJ_FLAGS(a0)
    bclr.b  #OF_ACTIVE, OBJ_FLAGS(a0)
    bclr.b  #PF_PLATFORM, (PlayerFlags)
@NoCeilCheck:
    
    move.w  #-1, OBJ_YSPEED(a0)         ; Now do platformy stuff
    bra     RunPlatformCommon

;****************************************************************************
; RunPlatformDownwards
; Executes the behavior for a platform that moves downwards.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformDownwards:
    move.w  OBJ_Y(a0), d7               ; Move downwards
    addq.w  #1, d7
    move.w  d7, OBJ_Y(a0)
    
    move.w  (MapBottom), d6             ; Too far?
    add.w   #$10, d6
    cmp.w   d6, d7
    bgt     DestroySelf
    
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)   ; Prevent players from going into
    beq.s   @NoGroundCheck                ; the floor
    move.w  (PlayerX), d7
    move.w  (PlayerY), d6
    add.w   #PLAYER_Y2+1, d6
    bsr     TileAt
    cmp.b   #COLL_SOLID, d6
    bne.s   @NoGroundCheck
    bset.b  #OF_DISABLED, OBJ_FLAGS(a0)
    bclr.b  #OF_ACTIVE, OBJ_FLAGS(a0)
    bclr.b  #PF_PLATFORM, (PlayerFlags)
@NoGroundCheck:
    
    move.w  #1, OBJ_YSPEED(a0)          ; Now do platformy stuff
    bra     RunPlatformCommon

;****************************************************************************
; RunPlatformFragile
; Executes the behavior for a fragile platform.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformFragile:
    btst.b  #OF_DISABLED, OBJ_FLAGS(a0) ; Falling already?
    beq.s   @NotFalling
    
    move.w  OBJ_YSPEED(a0), d7          ; Go dooooooown!!
    add.w   #$20, d7
    move.w  d7, OBJ_YSPEED(a0)
    add.w   (Subpixel), d7
    asr.w   #8, d7
    move.w  OBJ_Y(a0), d6
    add.w   d7, d6
    move.w  d6, OBJ_Y(a0)
    
    move.w  (MapBottom), d7             ; Too far?
    add.w   #$10, d7
    cmp.w   d7, d6
    bgt     DestroySelf
    rts
    
@NotFalling:
    move.w  OBJ_TIMER(a0), d7           ; About to fall apart?
    beq.s   @NotBreaking
    addq.w  #1, d7
    move.w  d7, OBJ_TIMER(a0)
    cmp.w   #60, d7
    bne.s   @Done
    
    bclr.b  #PF_PLATFORM, (PlayerFlags) ; Start falling
    bclr.b  #OF_ACTIVE, OBJ_FLAGS(a0)
    bset.b  #OF_DISABLED, OBJ_FLAGS(a0)
    rts
    
@NotBreaking:
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)   ; Still stable yet?
    beq.s   @Done
    move.w  #1, OBJ_TIMER(a0)
    
@Done:
    bra     RunPlatformCommon           ; Do platformey stuff

;****************************************************************************
; RunPlatformStill
; Executes the behavior for a platform that doesn't move.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;----------------------------------------------------------------------------
; notes: there's really nothing to do with it, so it's just an alias for
; RunPlatformCommon. This label is here just to make the purpose more obvious
;****************************************************************************

RunPlatformStill:

;****************************************************************************
; RunPlatformCommon
; Common behavior for all platform types.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPlatformCommon:
    btst.b  #OF_DISABLED, OBJ_FLAGS(a0) ; Is the platform usable?
    beq.s   @StillWorking
    rts
@StillWorking:
    
    move.w  OBJ_X(a0), d0               ; Get player and player status
    move.w  OBJ_Y(a0), d1
    move.w  (PlayerX), d2
    move.w  (PlayerY), d3
    move.b  OBJ_FLAGS(a0), d4
    move.b  (PlayerFlags), d5
    
    btst.l  #OF_ACTIVE, d4              ; Is it active?
    bne.s   @Active
    
    tst.w   (PlayerYSpeed)              ; Players can through the bottom
    blt.s   @StillOff
    
    move.w  d0, d7                      ; Should platform trigger?
    sub.w   #$20, d7
    cmp.w   d7, d2
    blt.s   @StillOff
    add.w   #$3F, d7
    cmp.w   d7, d2
    bgt.s   @StillOff
    move.w  d1, d7
    sub.w   #$10+4, d7
    cmp.w   d7, d3
    blt.s   @StillOff
    addq.w  #8, d7
    cmp.w   d7, d3
    bgt.s   @StillOff
    
    bset.l  #OF_ACTIVE, d4              ; Activate the platform
    bset.l  #PF_LANDED, d5
    bset.l  #PF_PLATFORM, d5
    move.b  d4, OBJ_FLAGS(a0)
    move.b  d5, (PlayerFlags)
    clr.w   (PlayerYSpeed)
    
    sub.w   #$10+$08, d1                ; Put player on the platform
    move.w  d1, (PlayerY)
    
@StillOff:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Active:
    btst.l  #PF_PLATFORM, d5            ; Make sure it's *really* active
    bne.s   @YesSeriously
    bclr.l  #OF_ACTIVE, d4
    move.b  d4, OBJ_FLAGS(a0)
    rts
@YesSeriously:
    
    move.w  OBJ_XSPEED(a0), d7           ; Keep player on the platform
    add.w   d7, (PlayerX)
    move.w  OBJ_YSPEED(a0), d7
    add.w   d7, (PlayerY)
    clr.w   (PlayerYSpeed)
    
    move.w  d0, d7                      ; Is the player still on it?
    sub.w   #$20, d7
    cmp.w   d7, d2
    blt.s   @Deactivate
    add.w   #$3F, d7
    cmp.w   d7, d2
    bgt.s   @Deactivate
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Deactivate:
    bclr.l  #OF_ACTIVE, d4
    bclr.l  #PF_PLATFORM, d5
    move.b  d4, OBJ_FLAGS(a0)
    move.b  d5, (PlayerFlags)
    rts

;****************************************************************************
; DrawPlatform
; Draws a platform.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawPlatform:
    move.w  OBJ_X(a0), d0               ; Determine position on screen
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    cmp.w   #-$40, d1                   ; These turn out to be common enough
    ble.s   @Skip                         ; in some rooms to be a problem
    cmp.w   #320+$20, d1
    bge.s   @Skip
    cmp.w   #-$40, d0
    ble.s   @Skip
    cmp.w   #320+$20, d0
    bge.s   @Skip
    
    lea     (SprPlatform_Idle), a6      ; Check which sprite to use
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)     ; This is for the tilting look
    beq.s   @NotSteppedOn
    move.w  (PlayerX), d7
    sub.w   OBJ_X(a0), d7
    add.w   #$20, d7
    lsr.w   #1, d7
    and.w   #$07<<2, d7
    lea     @Tilting(pc), a6
    move.l  (a6,d7.w), a6
@NotSteppedOn:
    
    move.w  #$2000+VramPlatform, d2     ; Draw platform
    jsr     (AddMetasprite).w
    
@Skip:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Tilting:
    dcb.l   2, SprPlatform_Left
    dcb.l   1, SprPlatform_MidLeft
    dcb.l   2, SprPlatform_Middle
    dcb.l   1, SprPlatform_MidRight
    dcb.l   2, SprPlatform_Right

;****************************************************************************
; InitRotatingPlatform
; Initializes a rotating platform.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitRotatingPlatform:
    moveq   #0, d7                      ; Store rotation where it's more
    move.b  OBJ_FLAGS(a6), d7             ; relevant
    move.w  d7, OBJ_TIMER(a6)
    clr.b   OBJ_FLAGS(a6)
    
    rts                                 ; End of subroutine

;****************************************************************************
; RunRotatingPlatform
; Executes the behavior for rotating platforms.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRotatingPlatform:
    move.w  OBJ_TIMER(a0), d7           ; Get current offset of platform
    add.w   d7, d7
    lea     (Sines), a1
    lea     (Cosines), a2
    move.w  (a2,d7.w), d0
    move.w  (a1,d7.w), d1
    neg.w   d1
    asr.w   #1, d0
    asr.w   #1, d1
    
    move.w  OBJ_TIMER(a0), d7           ; Make platform spin
    addq.b  #1, d7
    cmp.b   #OBJTYPE_CCWPLATFORM, OBJ_TYPE(a0)
    beq.s   @NotClockwise
    subq.b  #2, d7
@NotClockwise:
    move.w  d7, OBJ_TIMER(a0)
    
    add.w   d7, d7                      ; Determine how much the platform
    move.w  (a2,d7.w), d2                 ; has moved
    move.w  (a1,d7.w), d3
    neg.w   d3
    asr.w   #1, d2
    asr.w   #1, d3
    sub.w   d0, d2
    sub.w   d1, d3
    move.w  d2, OBJ_XSPEED(a0)
    move.w  d3, OBJ_YSPEED(a0)
    
    add.w   d0, d2                      ; Do platformy stuff
    add.w   d1, d3
    move.w  OBJ_X(a0), -(sp)
    move.w  OBJ_Y(a0), -(sp)
    add.w   d2, OBJ_X(a0)
    add.w   d3, OBJ_Y(a0)
    bsr     RunPlatformCommon
    move.w  (sp)+, OBJ_Y(a0)
    move.w  (sp)+, OBJ_X(a0)
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawRotatingPlatform
; Draws a rotating platform (those spinning around a chain)
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawRotatingPlatform:
    move.w  OBJ_X(a0), d0               ; Determine origin on screen
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    move.w  OBJ_TIMER(a0), d7           ; Get horizontal and vertical deltas
    and.w   #$FF, d7
    add.w   d7, d7
    lea     (Sines), a1
    move.w  (a1,d7.w), d5
    lea     $80(a1), a1
    move.w  (a1,d7.w), d4
    neg.w   d5
    
    movem.w d0-d1/d4-d5, -(sp)          ; Calculate position of the platform
    asr.w   #1, d4
    asr.w   #1, d5
    add.w   d4, d0
    add.w   d5, d1
    
    lea     (SprPlatform_Idle), a6      ; Check which sprite to use
    btst.b  #OF_ACTIVE, OBJ_FLAGS(a0)     ; This is for the tilting look
    beq.s   @NotSteppedOn
    move.w  (PlayerX), d7
    sub.w   OBJ_X(a0), d7
    sub.w   d4, d7
    add.w   #$20, d7
    lsr.w   #1, d7
    and.w   #$07<<2, d7
    lea     @Tilting(pc), a6
    move.l  (a6,d7.w), a6
@NotSteppedOn:
    
    move.w  #$2000+VramPlatform, d2     ; Draw platform
    jsr     (AddMetasprite).w
    
    movem.w (sp)+, d0-d1/d4-d5          ; Draw the chain
    subq.w  #8, d0
    subq.w  #8, d1
    move.w  #VramLink, d2
    moveq   #%0101, d3
    
    move.w  d4, a1
    move.w  d5, a2
    moveq   #7-1, d7
@ChainLoop:
    movem.w d0-d1/d4-d5/d7, -(sp)
    asr.w   #4, d4
    asr.w   #4, d5
    add.w   d4, d0
    add.w   d5, d1
    jsr     (AddSprite).w
    movem.w (sp)+, d0-d1/d4-d5/d7
    add.w   a1, d4
    add.w   a2, d5
    dbf     d7, @ChainLoop
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Tilting:
    dcb.l   2, SprPlatform_Left
    dcb.l   1, SprPlatform_MidLeft
    dcb.l   2, SprPlatform_Middle
    dcb.l   1, SprPlatform_MidRight
    dcb.l   2, SprPlatform_Right
