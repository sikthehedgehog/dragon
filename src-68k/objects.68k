;****************************************************************************
; Some tweakable parameters to the object manager
;****************************************************************************

MAX_OBJ:        equ $40     ; How many objects we'll allow in a room

;****************************************************************************
; OBJ_*
; Fields making up an object
;****************************************************************************

                rsreset
OBJ_TYPE:       rs.b 1      ; Object type
OBJ_FLAGS:      rs.b 1      ; Status flags

OBJ_X:          rs.w 1      ; Horizontal position
OBJ_Y:          rs.w 1      ; Vertical position
OBJ_XSPEED:     rs.w 1      ; Horizontal speed
OBJ_YSPEED:     rs.w 1      ; Vertical speed
OBJ_XSPAWN:     rs.w 1      ; Horizontal position of spawn point
OBJ_YSPAWN:     rs.w 1      ; Vertical position of spawn point

OBJ_BOXX1:      rs.w 1      ; Hitbox left side (relative)
OBJ_BOXY1:      rs.w 1      ; Hitbox top side (relative)
OBJ_BOXX2:      rs.w 1      ; Hitbox right side (relative)
OBJ_BOXY2:      rs.w 1      ; Hitbox bottom side (relative)

OBJ_TIMER:      rs.w 1      ; Generic timer
OBJ_HEALTH:     rs.b 1      ; Health points left
OBJ_DATA:       rs.b 1      ; For miscellaneous data

OBJ_SIZE:       rs.b 0      ; Size of an object entry

;****************************************************************************
; OF_*
; Status flags for an object
;****************************************************************************

                rsreset
OF_DIR:         rs.b 1      ; Which direction it's looking at
OF_ACTIVE:      rs.b 1      ; This object is in active mode
OF_DISABLED:    rs.b 1      ; This object is not working

;****************************************************************************
; OBJTYPE_*
; Possible object types
;****************************************************************************

                    rsreset
                    rs.b 1      ; No object
OBJTYPE_SLOPE:      rs.b 1      ; Slope
OBJTYPE_RPOTION:    rs.b 1      ; Red potion
OBJTYPE_YPOTION:    rs.b 1      ; Yellow potion
OBJTYPE_CROSS:      rs.b 1      ; Cross
OBJTYPE_MAGICHITBOX:rs.b 1      ; Magic hitbox
OBJTYPE_MAGICSTAR:  rs.b 1      ; Magic star
OBJTYPE_MAGICPUFF:  rs.b 1      ; Transformation puff
OBJTYPE_DERBIS      rs.b 1      ; Derbis rock
OBJTYPE_DOOR:       rs.b 1      ; Door
OBJTYPE_END:        rs.b 1      ; End stage
OBJTYPE_UPLATFORM:  rs.b 1      ; Upwards platform
OBJTYPE_DPLATFORM:  rs.b 1      ; Downwards platform
OBJTYPE_CCWPLATFORM:rs.b 1      ; CCW rotating platform
OBJTYPE_CWPLATFORM: rs.b 1      ; CW rotating platform
OBJTYPE_PLATSPAWN:  rs.b 1      ; Platform spawner
OBJTYPE_SPIKEBALL:  rs.b 1      ; Spikeball
OBJTYPE_STRAYBALL:  rs.b 1      ; Stray spikeball
OBJTYPE_SWINGBALL:  rs.b 1      ; Pendulum swinging spikeball
OBJTYPE_HSWINGBALL: rs.b 1      ; Horizontally swinging spikeball
OBJTYPE_GHOST:      rs.b 1      ; Ghost
OBJTYPE_SPIDER:     rs.b 1      ; Spider
OBJTYPE_PIRANHA:    rs.b 1      ; Piranha
OBJTYPE_KNIGHT:     rs.b 1      ; Undead knight
OBJTYPE_CHAINBASE:  rs.b 1      ; Base of a chain
OBJTYPE_HCHAIN:     rs.b 1      ; Chunk of horizontal chain
OBJTYPE_VCHAIN:     rs.b 1      ; Chunk of vertical chain
OBJTYPE_STRAYLINK:  rs.b 1      ; Stray link
OBJTYPE_ANGEL:      rs.b 1      ; Rescued soul
OBJTYPE_FISH:       rs.b 1      ; Tiny fish
OBJTYPE_RISINGLAVA: rs.b 1      ; Rising lava
OBJTYPE_LAVAFLOOD:  rs.b 1      ; Lava flood
OBJTYPE_REFLECTION: rs.b 1      ; Merlina reflection
OBJTYPE_COGWHEEL:   rs.b 1      ; Cogwheel
OBJTYPE_LAVABURST:  rs.b 1      ; Lava bursting from the floor
OBJTYPE_LAVABREAK:  rs.b 1      ; Lava bursting from the wall at the end

;****************************************************************************
; ClearObjects
; Clears the object list (wipes all objects from it).
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

ClearObjects:
    lea     (ObjList), a6               ; Remove all entries
    move.w  #MAX_OBJ-1, d7
@Loop:
    clr.b   (a6)
    lea     OBJ_SIZE(a6), a6
    dbf     d7, @Loop
    
    rts                                 ; End of subroutine

;****************************************************************************
; AddObject
; Adds a new object.
;----------------------------------------------------------------------------
; input d7.w .... X coordinate
; input d6.w .... Y coordinate
; input d5.w .... Object type (low byte), object flags (high byte)
;----------------------------------------------------------------------------
; output a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a5
;****************************************************************************

AddObject:
    lea     (ObjList), a6               ; Look for an empty slot
@Loop:
    tst.b   OBJ_TYPE(a6)
    beq.s   @Found
    lea     OBJ_SIZE(a6), a6
    bra.s   @Loop
@Found:
    
    rol.w   #8, d5                      ; Initialize status of this object
    move.w  d5, OBJ_TYPE(a6)
    move.w  d7, OBJ_X(a6)
    move.w  d6, OBJ_Y(a6)
    clr.w   OBJ_XSPEED(a6)
    clr.w   OBJ_YSPEED(a6)
    move.w  d7, OBJ_XSPAWN(a6)
    move.w  d6, OBJ_YSPAWN(a6)
    clr.w   OBJ_BOXX1(a6)
    clr.w   OBJ_BOXY1(a6)
    clr.w   OBJ_BOXX2(a6)
    clr.w   OBJ_BOXY2(a6)
    clr.w   OBJ_TIMER(a6)
    move.b  #1, OBJ_HEALTH(a6)
    
    lsr.w   #8, d5                      ; Call the initialization subroutine
    add.w   d5, d5                        ; (for type-specific init)
    add.w   d5, d5
    lea     @Func(pc), a5
    move.l  (a5,d5.w), a5
    jsr     (a5)
    
@Null:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Func:
    dc.l    @Null
    dc.l    @Null                       ; OBJTYPE_SLOPE
    dc.l    InitPotion                  ; OBJTYPE_RPOTION
    dc.l    InitPotion                  ; OBJTYPE_YPOTION
    dc.l    InitPotion                  ; OBJTYPE_CROSS
    dc.l    InitMagicHitbox             ; OBJTYPE_MAGICHITBOX
    dc.l    @Null                       ; OBJTYPE_MAGICSTAR
    dc.l    @Null                       ; OBJTYPE_MAGICPUFF
    dc.l    @Null                       ; OBJTYPE_DERBIS
    dc.l    InitDoor                    ; OBJTYPE_DOOR
    dc.l    InitEnd                     ; OBJTYPE_END
    dc.l    @Null                       ; OBJTYPE_UPLATFORM
    dc.l    @Null                       ; OBJTYPE_DPLATFORM
    dc.l    InitRotatingPlatform        ; OBJTYPE_CCWPLATFORM
    dc.l    InitRotatingPlatform        ; OBJTYPE_CWPLATFORM
    dc.l    InitPlatformSpawner         ; OBJTYPE_PLATSPAWN
    dc.l    InitSpikeball               ; OBJTYPE_SPIKEBALL
    dc.l    InitStraySpikeball          ; OBJTYPE_STRAYBALL
    dc.l    InitSwingingSpikeball       ; OBJTYPE_SWINGBALL
    dc.l    InitSwingingSpikeball       ; OBJTYPE_HSWINGBALL
    dc.l    InitGhost                   ; OBJTYPE_GHOST
    dc.l    InitSpider                  ; OBJTYPE_SPIDER
    dc.l    InitPiranha                 ; OBJTYPE_PIRANHA
    dc.l    InitKnight                  ; OBJTYPE_KNIGHT
    dc.l    @Null                       ; OBJTYPE_CHAINBASE
    dc.l    @Null                       ; OBJTYPE_HCHAIN
    dc.l    @Null                       ; OBJTYPE_VCHAIN
    dc.l    InitStrayLink               ; OBJTYPE_STRAYLINK
    dc.l    InitAngel                   ; OBJTYPE_ANGEL
    dc.l    @Null                       ; OBJTYPE_FISH
    dc.l    InitRisingLava              ; OBJTYPE_RISINGLAVA
    dc.l    InitLavaFlood               ; OBJTYPE_LAVAFLOOD
    dc.l    @Null                       ; OBJTYPE_REFLECTION
    dc.l    InitCogwheel                ; OBJTYPE_COGWHEEL
    dc.l    InitLavaBurst               ; OBJTYPE_LAVABURST
    dc.l    InitLavaBreak               ; OBJTYPE_LAVABREAK

;****************************************************************************
; DestroySelf
; Destroys the currently running object, removing its slot from the list.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; notes: you should use BRA/JMP into this.
;****************************************************************************

DestroySelf:
    clr.b   OBJ_TYPE(a0)                ; Clear the slot
    rts                                 ; End of subroutine

;****************************************************************************
; RunAllObjects
; Executes the logic for all objects in the room.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

RunAllObjects:
    lea     @Table(pc), a6
    bsr     LoopAllObjects
@Null:
    rts

;----------------------------------------------------------------------------

@Table:
    dc.l    @Null
    dc.l    RunSlope                    ; OBJTYPE_SLOPE
    dc.l    RunRedPotion                ; OBJTYPE_RPOTION
    dc.l    RunYellowPotion             ; OBJTYPE_YPOTION
    dc.l    RunCross                    ; OBJTYPE_CROSS
    dc.l    RunMagicHitbox              ; OBJTYPE_MAGICHITBOX
    dc.l    RunMagicStar                ; OBJTYPE_MAGICSTAR
    dc.l    RunMagicPuff                ; OBJTYPE_MAGICPUFF
    dc.l    RunMagicStar                ; OBJTYPE_DERBIS
    dc.l    RunDoor                     ; OBJTYPE_DOOR
    dc.l    RunEnd                      ; OBJTYPE_END
    dc.l    RunPlatformUpwards          ; OBJTYPE_UPLATFORM
    dc.l    RunPlatformDownwards        ; OBJTYPE_DPLATFORM
    dc.l    RunRotatingPlatform         ; OBJTYPE_CCWPLATFORM
    dc.l    RunRotatingPlatform         ; OBJTYPE_CWPLATFORM
    dc.l    RunPlatformSpawner          ; OBJTYPE_PLATSPAWN
    dc.l    RunSpikeball                ; OBJTYPE_SPIKEBALL
    dc.l    RunStraySpikeball           ; OBJTYPE_STRAYBALL
    dc.l    RunSwingingSpikeball        ; OBJTYPE_SWINGBALL
    dc.l    RunHorSwingSpikeball        ; OBJTYPE_HSWINGBALL
    dc.l    RunGhost                    ; OBJTYPE_GHOST
    dc.l    RunSpider                   ; OBJTYPE_SPIDER
    dc.l    RunPiranha                  ; OBJTYPE_PIRANHA
    dc.l    RunKnight                   ; OBJTYPE_KNIGHT
    dc.l    @Null                       ; OBJTYPE_CHAINBASE
    dc.l    @Null                       ; OBJTYPE_HCHAIN
    dc.l    @Null                       ; OBJTYPE_VCHAIN
    dc.l    RunStrayLink                ; OBJTYPE_STRAYLINK
    dc.l    RunAngel                    ; OBJTYPE_ANGEL
    dc.l    RunFish                     ; OBJTYPE_FISH
    dc.l    RunRisingLava               ; OBJTYPE_RISINGLAVA
    dc.l    RunLavaFlood                ; OBJTYPE_LAVAFLOOD
    dc.l    @Null                       ; OBJTYPE_REFLECTION
    dc.l    RunCogwheel                 ; OBJTYPE_COGWHEEL
    dc.l    RunLavaBurst                ; OBJTYPE_LAVABURST
    dc.l    @Null                       ; OBJTYPE_LAVABREAK

;****************************************************************************
; DrawAllObjects
; Draws all the objects in the room.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawAllObjects:
    if      DEBUG_DRAWUSAGE
    move.w  #$8C00, ($C00004)
    endc
    
    lea     @Table(pc), a6
    bsr     LoopAllObjects
    
    if      DEBUG_DRAWUSAGE
    move.w  #$8C81, ($C00004)
    endc
    
@Null:
    rts

;----------------------------------------------------------------------------

@Table:
    dc.l    @Null
    dc.l    @Null                       ; OBJTYPE_SLOPE
    dc.l    DrawPotion                  ; OBJTYPE_RPOTION
    dc.l    DrawPotion                  ; OBJTYPE_YPOTION
    dc.l    DrawPotion                  ; OBJTYPE_CROSS
    dc.l    @Null                       ; OBJTYPE_MAGICHITBOX
    dc.l    DrawMagicStar               ; OBJTYPE_MAGICSTAR
    dc.l    DrawMagicPuff               ; OBJTYPE_MAGICPUFF
    dc.l    DrawDerbis                  ; OBJTYPE_DERBIS
    dc.l    DrawDoor                    ; OBJTYPE_DOOR
    dc.l    @Null                       ; OBJTYPE_END
    dc.l    DrawPlatform                ; OBJTYPE_UPLATFORM
    dc.l    DrawPlatform                ; OBJTYPE_DPLATFORM
    dc.l    DrawRotatingPlatform        ; OBJTYPE_CCWPLATFORM
    dc.l    DrawRotatingPlatform        ; OBJTYPE_CWPLATFORM
    dc.l    @Null                       ; OBJTYPE_PLATSPAWN
    dc.l    DrawSpikeball               ; OBJTYPE_SPIKEBALL
    dc.l    DrawSpikeball               ; OBJTYPE_STRAYBALL
    dc.l    DrawSwingingSpikeball       ; OBJTYPE_SWINGBALL
    dc.l    DrawHorSwingSpikeball       ; OBJTYPE_HSWINGBALL
    dc.l    DrawGhost                   ; OBJTYPE_GHOST
    dc.l    DrawSpider                  ; OBJTYPE_SPIDER
    dc.l    DrawPiranha                 ; OBJTYPE_PIRANHA
    dc.l    DrawKnight                  ; OBJTYPE_KNIGHT
    dc.l    DrawBaseLink                ; OBJTYPE_CHAINBASE
    dc.l    DrawHorChain                ; OBJTYPE_HCHAIN
    dc.l    DrawVerChain                ; OBJTYPE_VCHAIN
    dc.l    DrawStrayLink               ; OBJTYPE_STRAYLINK
    dc.l    DrawAngel                   ; OBJTYPE_ANGEL
    dc.l    DrawFish                    ; OBJTYPE_FISH
    dc.l    @Null                       ; OBJTYPE_RISINGLAVA
    dc.l    DrawLavaFlood               ; OBJTYPE_LAVAFLOOD
    dc.l    DrawReflection              ; OBJTYPE_REFLECTION
    dc.l    DrawCogwheel                ; OBJTYPE_COGWHEEL
    dc.l    DrawLavaBurst               ; OBJTYPE_LAVABURST
    dc.l    @Null                       ; OBJTYPE_LAVABREAK

;****************************************************************************
; LoopAllObjects
; Actual loop for RunAllObjects and DrawAllObjects
;----------------------------------------------------------------------------
; input a6.l ... Function list
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

LoopAllObjects:
    lea     (ObjList), a0               ; Go through all objects
    move.w  #MAX_OBJ-1, d7
@Loop:
    move.w  d7, -(sp)
    move.l  a6, -(sp)
    
    moveq   #0, d6                      ; Determine handler for this object
    move.b  OBJ_TYPE(a0), d6
    add.w   d6, d6
    add.w   d6, d6
    move.l  (a6,d6.w), a6
    
    jsr     (a6)                        ; Run the handler
    
    move.l  (sp)+, a6                   ; Go for next object
    move.w  (sp)+, d7
    lea     OBJ_SIZE(a0), a0
    dbf     d7, @Loop
    
    rts                                 ; End of subroutine

;****************************************************************************
; AdvanceObject
; Makes an object advance horizontally based on its current speed, taking
; collision against the map into account.
;----------------------------------------------------------------------------
; input a6.l .... Pointer to object
;----------------------------------------------------------------------------
; output d7.w ... 0 if no collision, 1 if collision
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

AdvanceObject:
    move.w  OBJ_XSPEED(a6), d7          ; Determine momentum
    add.w   (Subpixel), d7
    asr.w   #8, d7
    beq.s   @Idle
    bmi.s   @Left

;----------------------------------------------------------------------------

@Right:
    move.w  d7, -(sp)                   ; Check if there's room to move to
    add.w   OBJ_X(a6), d7                 ; the right
    add.w   OBJ_BOXX2(a6), d7
    move.w  OBJ_Y(a6), d6
    move.l  a6, -(sp)
    bsr     TileAt
    move.l  (sp)+, a6
    move.w  (sp)+, d7
    cmp.b   #COLL_SOLID, d6
    bne.s   @RightOK
    moveq   #1, d7
    rts

@RightOK:
    add.w   d7, OBJ_X(a6)               ; Can move right
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Left:
    move.w  d7, -(sp)                   ; Check if there's room to move to
    add.w   OBJ_X(a6), d7                 ; the left
    add.w   OBJ_BOXX1(a6), d7
    move.w  OBJ_Y(a6), d6
    move.l  a6, -(sp)
    bsr     TileAt
    move.l  (sp)+, a6
    move.w  (sp)+, d7
    cmp.b   #COLL_SOLID, d6
    bne.s   @LeftOK
    moveq   #1, d7
    rts

@LeftOK:
    add.w   d7, OBJ_X(a6)               ; Can move left
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Idle:
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine

;****************************************************************************
; GravityObject
; Vertical counterpart to AdvanceObject.
;----------------------------------------------------------------------------
; input a6.l .... Pointer to object
;----------------------------------------------------------------------------
; output d7.w ... 0 if no collision, 1 if collision
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

GravityObject:
    move.w  OBJ_YSPEED(a6), d7          ; Determine momentum
    add.w   (Subpixel), d7
    asr.w   #8, d7
    beq.s   @Idle
    bmi.s   @Rise

;----------------------------------------------------------------------------

@Fall:
    move.w  d7, -(sp)                   ; Check if we can keep falling
    add.w   OBJ_Y(a6), d7
    add.w   OBJ_BOXY2(a6), d7
    move.w  OBJ_X(a6), d6
    exg.l   d6, d7
    move.l  a6, -(sp)
    bsr     TileAt
    move.l  (sp)+, a6
    move.w  (sp)+, d7
    cmp.b   #COLL_EMPTY, d6
    beq.s   @FallOK
    cmp.b   #COLL_WATER, d6
    beq.s   @FallOK
    
    move.w  OBJ_Y(a6), d6               ; Put object on the floor
    move.w  OBJ_BOXY2(a6), d5
    add.w   d7, d6
    add.w   d5, d6
    or.w    #$001F, d6
    sub.w   #$0020, d6
    sub.w   d5, d6
    move.w  d6, OBJ_Y(a6)
    
    moveq   #1, d7                      ; Collided
    rts                                 ; End of subroutine
    
@FallOK:
    add.w   d7, OBJ_Y(a6)               ; Still falling
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Rise:
    add.w   d7, OBJ_Y(a6)               ; Just dumbly go upwards (no check)
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Idle:
    clr.w   d7                          ; No collision
    rts                                 ; End of subroutine
