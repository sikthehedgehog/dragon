;****************************************************************************
; DrawHUD
; Draws the HUD on screen.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawHUD:
    btst.b  #GS_PAUSED, (GameState)     ; Draw "PAUSE" text
    beq.s   @NotPaused
    
    move.w  #160, d0
    move.w  #112, d1
    move.w  #$8000+VramHUDPause, d2
    lea     (SprPause), a6
    jsr     (AddMetasprite).w
@NotPaused:

;----------------------------------------------------------------------------

    moveq   #0, d7                      ; Determine heart pattern to use
    move.b  (PlayerHealth), d7            ; 3 health points: ***
    eor.b   #3, d7                        ; 2 health points: **.
    add.w   d7, d7                        ; 1 health point:  *..
    lea     @HealthTable(pc), a0          ; 0 health points: ...
    lea     (a0,d7.w), a0
    
    move.w  (HealthBlink), d7           ; Make health meter blink?
    and.w   #$02, d7
    beq.s   @NoHealthBlink
    lea     @HealthBlink(pc), a0
@NoHealthBlink:
    
    move.w  #16, d0                     ; Draw all three hearts
    move.w  #200, d1
    moveq   #%0101, d3
    move.w  (a0)+, d2
    jsr     (AddSprite).w
    add.w   #$10, d0
    move.w  (a0)+, d2
    jsr     (AddSprite).w
    add.w   #$10, d0
    move.w  (a0)+, d2
    jsr     (AddSprite).w
    
;----------------------------------------------------------------------------
    
    add.w   #$10, d0                    ; Draw lives counter cross
    addq.w  #8, d1
    move.w  #$8000+VramHUDCross, d2
    moveq   #%0000, d3
    jsr     (AddSprite).w
    
    moveq   #0, d4                      ; Get lives left
    move.b  (Lives), d4
    
    addq.w  #8, d0                      ; Draw tens of lives
    subq.w  #8, d1
    moveq   #%0001, d3
    move.w  d4, d2
    lsr.w   #4, d2
    add.w   d2, d2
    beq.s   @NoLifeTens
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
    addq.w  #8, d0                      ; Draw units of lives
@NoLifeTens:
    move.w  d4, d2
    and.w   #$0F, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w

;----------------------------------------------------------------------------

    moveq   #0, d4                      ; Check how much magic has been
    move.b  (MagicMeter), d4              ; recharged so far
    lsr.w   #6-3, d4
    
    add.w   d4, d4                      ; Determine which sprites the bar
    add.w   d4, d4                        ; will use (based on the timer)
    lea     @MagicTable(pc), a0
    lea     (a0,d4.w), a0
    
    move.w  (Supermagic), d7            ; During supermagic? :D
    and.w   #$04, d7
    beq.s   @NoSupermagic
    lea     @MagicBlink(pc), a0
@NoSupermagic:
    
    move.w  #230, d0                    ; Draw left side of magic bar
    move.w  #200, d1
    move.w  #$8010+VramHUDBar, d2
    moveq   #%0001, d3
    jsr     (AddSprite).w
    
    addq.w  #8, d0                      ; Draw the inside of the bar
    move.w  (a0)+, d2
    moveq   #%1101, d3
    jsr     (AddSprite).w
    add.w   #$20, d0
    move.w  (a0)+, d2
    jsr     (AddSprite).w
    
    add.w   #$20, d0                    ; Draw right side of magic bar
    move.w  #$8012+VramHUDBar, d2
    moveq   #%0001, d3
    jsr     (AddSprite).w

;----------------------------------------------------------------------------

    tst.b   (HasKey)                    ; Got the key?
    beq.s   @NoKey
    
    move.w  #$60, d0                    ; Show that we have the key
    subq.w  #4, d1
    move.w  #$8000+VramKey, d2
    moveq   #%0110, d3
    jsr     (AddSprite).w
@NoKey:

;----------------------------------------------------------------------------

    moveq   #$10, d0                    ; Where score will be drawn
    moveq   #$08, d1
    moveq   #%0001, d3
    
    move.l  (Score), d4                 ; Get current score
    
    moveq   #7-1, d5                    ; Skip leading zeroes
@ScoreZeroes:
    rol.l   #4, d4
    move.w  d4, d2
    and.w   #$0F, d2
    bne.s   @ScoreNoZeroes
    dbf     d5, @ScoreZeroes
@ScoreNoZeroes:
    
    addq.w  #1, d5                      ; Draw score digits
@DrawScore:
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    rol.l   #4, d4
    move.w  d4, d2
    and.w   #$0F, d2
    addq.w  #8, d0
    dbf     d5, @DrawScore

;----------------------------------------------------------------------------

    if      DEBUG_CONTROLS
    btst.b  #GS_PAUSED, (GameState)     ; Only show stage ID while paused
    beq.s   @NoStage
    
    moveq   #0, d4                      ; Get current stage ID
    move.b  (Stage), d4
    
    divu.w  #100, d4                    ; Draw hundreds of stage ID
    move.w  d4, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    move.w  #280, d0
    moveq   #8, d1
    moveq   #%0001, d3
    jsr     (AddSprite).w
    
    clr.w   d4                          ; Draw tens of stage ID
    swap    d4
    divu.w  #10, d4
    move.w  d4, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    addq.w  #8, d0
    jsr     (AddSprite).w
    
    swap    d4                          ; Draw units of stage ID
    move.w  d4, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    addq.w  #8, d0
    jsr     (AddSprite).w
@NoStage:
    endc

;----------------------------------------------------------------------------

    if      DEBUG_HUD
    move.b  (LastUsage), d0             ; Get last CPU usage
    
    move.b  #$AA, d4                    ; Can we calculate the CPU usage?
    cmp.b   #$FF, d0                      ; (vblank is unreliable)
    beq.s   @CantCalcUsage
    
    lea     (NTSCUsage), a6             ; Determine how much CPU was used
    btst.b  #0, ($C00005)
    beq.s   @CalcForNTSC
    lea     (PALUsage), a6
@CalcForNTSC:
    and.w   #$FF, d0
    move.b  (a6,d0.w), d4
    
@CantCalcUsage:
    move.w  #$10, d0                    ; Draw first digit
    move.w  #$18, d1
    move.b  d4, d2
    lsr.b   #4, d2
    and.w   #$0F, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    moveq   #%0001, d3
    jsr     (AddSprite).w
    
    addq.w  #8, d0                      ; Draw second digit
    move.b  d4, d2
    and.w   #$0F, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
    addq.w  #8, d0                      ; Draw percent sign
    move.w  #$8000+VramHUDPercent, d2
    jsr     (AddSprite).w

;----------------------------------------------------------------------------

    lea     (ObjList), a6               ; Count how many objects exist
    moveq   #0, d4
    moveq   #MAX_OBJ-1, d7
@CountObjects:
    tst.b   OBJ_TYPE(a6)
    sne.b   d6
    sub.b   d6, d4
    lea     OBJ_SIZE(a6), a6
    dbf     d7, @CountObjects
    
    add.w   #$10, d0                    ; Why not?
    addq.w  #8, d1
    move.w  #$8000+VramHUDCross, d2
    moveq   #%0000, d3
    jsr     (AddSprite).w
    
    divu.w  #10, d4                     ; Split low and high digits
    add.l   d4, d4                      ; Since tile IDs are in steps of 2
    
    addq.w  #8, d0                      ; Draw first digit
    subq.w  #8, d1
    moveq   #%0001, d3
    tst.w   d4
    beq.s   @LessThan10Obj
    move.w  d4, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    addq.w  #8, d0
@LessThan10Obj:
    
    swap    d4                          ; Draw second digit
    move.w  d4, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w

;----------------------------------------------------------------------------

    move.w  #320-$18, d0                ; Where playtime timer is drawn
    move.w  #224-$28, d1
    
    moveq   #0, d4                      ; Draw second units
    move.b  (PlaySeconds), d4
    move.w  d4, d2
    and.w   #$0F, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
    subq.w  #8, d0                      ; Draw second tens
    move.w  d4, d2
    lsr.w   #4, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
    subq.w  #8, d0                      ; Draw colon
    move.w  #$8000+VramHUDColon, d2
    jsr     (AddSprite).w
    
    subq.w  #8, d0                      ; Draw minute units
    move.b  (PlayMinutes), d4
    move.w  d4, d2
    and.w   #$0F, d2
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
    subq.w  #8, d0                      ; Draw minute tens
    move.w  d4, d2
    lsr.w   #4, d2
    beq.s   @NoMinuteTens
    add.w   d2, d2
    add.w   #$8000+VramHUDNumber, d2
    jsr     (AddSprite).w
    
@NoMinuteTens:
    endc

;----------------------------------------------------------------------------

    moveq   #0, d0                      ; Show boss health bar?
    move.b  (BossMeter), d0
    beq.s   @NoBossMeter
    moveq   #0, d5
    move.b  (BossHealth), d5
    add.w   d5, d5
    
    move.w  d0, d4                      ; How long is the bar?
    lsr.w   #2, d4
    subq.w  #1, d4
    
    add.w   d0, d0                      ; Determine position of the bar
    add.w   d0, d0
    neg.w   d0
    add.w   #152, d0
    move.w  #40, d1
    
    move.w  #$8010+VramHUDBar, d2       ; Draw left side of the bar
    moveq   #%0001, d3
    jsr     (AddSprite).w
    
    addq.w  #8, d0                      ; Draw the inside of the bar
    moveq   #%1101, d3
    lea     @BossTable(pc), a5
@BossLoop:
    move.w  (a5,d5.w), d2
    jsr     (AddSprite).w
    add.w   #$20, d0
    subq.w  #8, d5
    bgt.s   *+4
    clr.w   d5
    dbf     d4, @BossLoop
    
    move.w  #$8012+VramHUDBar, d2       ; Draw right side of the bar
    moveq   #%0001, d3
    jsr     (AddSprite).w
@NoBossMeter:

;----------------------------------------------------------------------------

    move.b  (NumSprites), (GameSprites) ; Let raster effects know where the
                                          ; ingame sprites start so they can
                                          ; safely affect only those
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@HealthTable:
    dcb.w   3, $8004+VramHUDHealth
    dcb.w   3, $8000+VramHUDHealth
@HealthBlink:
    dcb.w   3, $8008+VramHUDHealth

@MagicTable:
    dc.w    $8008+VramHUDBar, $8008+VramHUDBar
    dc.w    $8006+VramHUDBar, $8008+VramHUDBar
    dc.w    $8004+VramHUDBar, $8008+VramHUDBar
    dc.w    $8002+VramHUDBar, $8008+VramHUDBar
    dc.w    $8000+VramHUDBar, $8008+VramHUDBar
    dc.w    $8000+VramHUDBar, $8006+VramHUDBar
    dc.w    $8000+VramHUDBar, $8004+VramHUDBar
    dc.w    $8000+VramHUDBar, $8002+VramHUDBar
    dc.w    $8000+VramHUDBar, $8000+VramHUDBar
@MagicBlink:
    dc.w    $8014+VramHUDBar, $8014+VramHUDBar

@BossTable:
    dc.w    $8008+VramHUDBar
    dc.w    $8006+VramHUDBar
    dc.w    $8004+VramHUDBar
    dc.w    $8002+VramHUDBar
    rept    12+1
    dc.w    $8000+VramHUDBar
    endr
