;****************************************************************************
; InitDoor
; Initializes a door's collision box.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitDoor:
    move.w  #-$18, OBJ_BOXX1(a6)
    move.w  #-$18, OBJ_BOXY1(a6)
    move.w  #$17, OBJ_BOXX2(a6)
    move.w  #$1F, OBJ_BOXY2(a6)
    rts

;****************************************************************************
; RunDoor
; Executes the behavior for a door.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunDoor:
    tst.b   OBJ_FLAGS(a0)               ; Is this door opened?
    beq.s   @NotEntering
    
    move.l  a0, a6                      ; Check if the player is in front of
    bsr     CollidesPlayer                ; us first
    tst.w   d7
    beq.s   @NotEntering
    
    btst.b  #0, (JoyPress)              ; Must be pressing up to enter
    beq.s   @NotEntering
    btst.b  #PF_LANDED, (PlayerFlags)   ; Also must be on the floor :P
    beq.s   @NotEntering
    
    cmp.b   #OBJTYPE_LOCKEDDOOR, OBJ_TYPE(a0) ; Is the door locked?
    bne.s   @NotLocked
    tst.b   (HasKey)
    beq.s   @NotEntering
    clr.b   (HasKey)
@NotLocked:
    
    move.b  OBJ_FLAGS(a0), d7           ; Go to the stage this door leads
    bra     SwitchStage
    
@NotEntering:
    rts                                 ; End of subroutine

;****************************************************************************
; DrawDoor
; Draws a door.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawDoor:
    move.w  OBJ_X(a0), d0               ; Get sprite position
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    move.b  OBJ_FLAGS(a0), d4           ; Get target stage
    
    cmp.b   #OBJTYPE_LOCKEDDOOR, OBJ_TYPE(a0) ; Locked?
    bne.s   @NoLockpad
    
    sub.w   #12, d0                     ; Draw the lockpad
    sub.w   #16, d1
    move.w  #$2000+VramLockpad, d2
    moveq   #%101010, d3
    jsr     (AddSprite).w
    add.w   #12, d0
    add.w   #16, d1
    
    clr.b   d4                          ; Always look closed
@NoLockpad:
    
    tst.b   d4                          ; Determine graphic to use
    sne.b   d2                            ; Doors going nowhere are closed
    ext.w   d2                            ; Doors going somewhere are opened
    and.w   #28, d2
    add.w   #$2000+VramDoorClose, d2
    
    lea     (SprDoor), a6               ; Draw door
    jsr     (AddMetasprite).w
    
    rts                                 ; End of subroutine

;****************************************************************************
; InitEnd
; Initializes an instaend block's collision box.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitEnd:
    move.w  #-$10, OBJ_BOXX1(a6)
    move.w  #-$10, OBJ_BOXY1(a6)
    move.w  #$0F, OBJ_BOXX2(a6)
    move.w  #$0F, OBJ_BOXY2(a6)
    rts

;****************************************************************************
; RunEnd
; Executes the behavior for an instaend block.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunEnd:
    move.l  a0, a6                      ; Check if the player reached us
    bsr     CollidesPlayer
    tst.w   d7
    beq.s   @NotEntering
    
    move.b  OBJ_FLAGS(a0), d7           ; Go to the stage this block leads
    bra     SwitchStage
    
@NotEntering:
    rts                                 ; End of subroutine
