MIRROR_ROOM:        equ 11*$20          ; Where the boss fight happens

DOPPLE_HEALTH:      equ 8               ; How many hits she can take
DOPPLE_SPEED:       equ MAX_SPEED       ; How fast she can run
DOPPLE_JUMP:        equ JUMP_FORCE      ; How high she jumps
DOPPLE_FALL:        equ ACCEL_FALL      ; How fast she falls
DOPPLE_REACTION:    equ 16              ; How fast she reacts
DOPPLE_REFLEX:      equ 4               ; How long she takes before attacking
DOPPLE_ATTACK:      equ 32              ; How long she spends attacking
DOPPLE_FLASH:       equ 60              ; How long invulnerability lasts

;****************************************************************************
; RunReflection
; Executes the behavior for the Merlina reflection before the fight.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunReflection:
    btst.b  #OF_DIR, OBJ_FLAGS(a0)      ; In the boss room?
    bne.s   @Alive
    rts
@Alive:
    
    cmp.w   #MIRROR_ROOM, (CameraX)     ; Got to the battle area?
    blt.s   @NotThereYet
    move.w  #MIRROR_ROOM, (CameraX)
    move.w  #MIRROR_ROOM, (CameraLeft)
    move.w  #MIRROR_ROOM, (CameraRight)
    
    move.w  (PlayerX), d7               ; Spawn doppleganger
    move.w  (PlayerY), d6
    sub.w   #12, d7
    moveq   #OBJTYPE_DOPPLE, d5
    bsr     AddObject
    
    bra     DestroySelf                 ; We're done
@NotThereYet:
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawReflection
; Draws Merlina's reflection in the mirror rooms.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawReflection:
    tst.b   (PlayerFlash)               ; If Merlina is flashing, so do we
    beq.s   @NoFlash
    btst.b  #PF_HURT, (PlayerFlags)
    bne.s   @NoFlash
    tst.b   (BlinkFlag)
    beq.s   @NoFlash
    rts
@NoFlash:
    
    move.w  #$4000+VramPlayer, d2       ; Check which way Merlina is facing
    btst.b  #PF_DIR, (PlayerFlags)
    beq.s   @NotFlipped
    or.w    #$0800, d2
@NotFlipped:
    
    move.w  (PlayerX), d0               ; Appear a bit shifted from
    move.w  (PlayerY), d1                 ; Merlina's position
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    sub.w   #12, d0
    
    moveq   #0, d3                      ; Ugly things going on later!
    move.b  (NumSprites), d3
    
    move.l  (PlayerMapping), a6         ; Draw the reflection
    jsr     (AddMetasprite).w
    
    moveq   #0, d4                      ; We're reusing Merlina's mappings to
    move.b  (NumSprites), d4              ; ensure they always match, but
    sub.b   d3, d4                        ; they don't have the superlow
    subq.w  #1, d4                        ; priority bit set. So now we mess
    blt.s   @NoFixNeeded                  ; directly with the sprite table to
    lsl.w   #3, d3                        ; inject them... Scary.
    lea     (SpriteBuf), a6               ; (superlow priority is needed to
    lea     (a6,d3.w), a6                 ; make reflections appear under the
    moveq   #%100000, d5                  ; doors, if you wonder)
@FixPriority:
    or.b    d5, 2(a6)
    addq.w  #8, a6
    dbf     d4, @FixPriority
@NoFixNeeded:
    
    rts                                 ; End of subroutine

;****************************************************************************
; InitDoppleganger
; Sets up the Merlina doppleganger.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitDoppleganger:
    move.b  #%1, OBJ_FLAGS(a6)          ; Start by jumping!
    move.w  #-DOPPLE_SPEED/2, OBJ_XSPEED(a6)
    move.w  #-DOPPLE_JUMP, OBJ_YSPEED(a6)
    
    move.b  #DOPPLE_HEALTH*2, (BossMeter)   ; Initial health
    move.b  #DOPPLE_HEALTH*2, (BossHealth)
    move.b  #DOPPLE_HEALTH, OBJ_HEALTH(a6)
    
    move.w  #PLAYER_X1, OBJ_BOXX1(a6)   ; Set up hitbox
    move.w  #PLAYER_Y1, OBJ_BOXY1(a6)
    move.w  #PLAYER_X2, OBJ_BOXX2(a6)
    move.w  #PLAYER_Y2, OBJ_BOXY2(a6)
    
    clr.w   (DoppleMercy)               ; No mercy invulnerability yet
    clr.w   (DoppleMagicTimer)          ; Use magic right away!
    
    move.b  #-1, (DoppleOldPose)        ; Force an animation change
    rts                                 ; End of subroutine

;****************************************************************************
; RunDoppleganger
; Executes the behavior for the Merlina doppleganger.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunDoppleganger:
    move.w  OBJ_X(a0), d0               ; Get current status
    move.w  OBJ_Y(a0), d1
    move.b  OBJ_FLAGS(a0), d2
    
    move.b  #PA_IDLE, (DopplePose)      ; Idle by default
    
    tst.w   OBJ_YSPEED(a0)              ; In the air?
    blt.s   @InAir
    cmp.w   #$B0, d1
    beq.s   @OnFloor

;----------------------------------------------------------------------------

@InAir:
    move.w  OBJ_XSPEED(a0), d7
    move.w  OBJ_YSPEED(a0), d6
    add.w   (Subpixel), d7
    add.w   (Subpixel), d6
    asr.w   #8, d7
    asr.w   #8, d6
    add.w   d7, d0
    add.w   d6, d1
    
    add.w   #DOPPLE_FALL, OBJ_YSPEED(a0)
    move.b  #PA_JUMP, (DopplePose)
    bra     @ActionDone

;----------------------------------------------------------------------------

@OnFloor:
    tst.b   OBJ_HEALTH(a0)              ; Already dead?
    beq     @Dead
    
    btst.l  #OF_SPECIAL, d2             ; Continue an action?
    bne     @InMagic
    btst.l  #OF_ACTIVE, d2
    bne.s   @InPlace
    tst.w   OBJ_TIMER(a0)
    bne.s   @Running
    
    move.l  a0, a6                      ; Look towards the player
    bsr     FacePlayer
    move.b  OBJ_FLAGS(a0), d2
    
    tst.w   (DoppleMagicTimer)          ; Time to use magic?
    beq     @UseMagic
    
    move.w  d0, d7                      ; Is she close enough?
    sub.w   (PlayerX), d7
    bpl.s   *+4
    neg.w   d7
    cmp.w   #$30, d7
    bge.s   @StartRunning
    
    btst.b  #PF_LANDED, (PlayerFlags)   ; Is the player in the air?
    beq     @Jump
    bset.l  #OF_ACTIVE, d2              ; Ready to attack!
    bra.s   @InPlace

;----------------------------------------------------------------------------

@StartRunning:
    move.w  #DOPPLE_REACTION, OBJ_TIMER(a0)

@Running:
    subq.w  #1, OBJ_TIMER(a0)           ; Delay before we react again
    
    move.w  #DOPPLE_SPEED, d7           ; Run forwards
    btst.l  #OF_DIR, d2
    beq.s   *+4
    neg.w   d7
    add.w   (Subpixel), d7
    asr.w   #8, d7
    add.w   d7, d0
    move.b  #PA_RUN, (DopplePose)
    bra     @ActionDone

;----------------------------------------------------------------------------

@InPlace:
    move.w  OBJ_TIMER(a0), d7           ; Are we idling?
    addq.w  #1, d7
    move.w  d7, OBJ_TIMER(a0)
    cmp.w   #DOPPLE_REFLEX, d7
    bge.s   @Attacking
    move.b  #PA_IDLE, (DopplePose)
    bra     @ActionDone
@Attacking:
    
    bne.s   @NoBroomWhoosh              ; Whoosh!
    moveq   #SFX_ATTACK, d7
    jsr     (PlaySFX).w
@NoBroomWhoosh:
    
    cmp.w   #DOPPLE_ATTACK, d7          ; Done with the attack?
    bne.s   @DoneAttacking
    bclr.l  #OF_ACTIVE, d2
    clr.w   OBJ_TIMER(a0)
@DoneAttacking:
    
    move.b  #PA_ATTACK, (DopplePose)    ; Show us using the broom
    bra     @ActionDone

;----------------------------------------------------------------------------

@Dead:
    move.b  #PA_DEAD, (DopplePose)      ; Lying on the floor
    
    move.w  OBJ_TIMER(a0), d7           ; Vanishing?
    addq.w  #1, d7
    move.w  d7, OBJ_TIMER(a0)
    cmp.w   #$80, d7
    blo.s   @ActionDone
    
    clr.b   (BossMeter)                 ; Undo the boss arena
    moveq   #OBJTYPE_PUSHLIMIT, d5
    bsr     AddObject
    
    bra     DestroySelf                 ; We're done

;----------------------------------------------------------------------------

@Jump:
    move.w  #DOPPLE_SPEED, d7           ; Take off!
    btst.l  #OF_DIR, d2
    beq.s   *+4
    neg.w   d7
    move.w  d7, OBJ_XSPEED(a0)
    move.w  #-DOPPLE_JUMP, OBJ_YSPEED(a0)
    
    moveq   #SFX_JUMP, d7               ; Noise
    jsr     (PlaySFX).w
    bra     @ActionDone

;----------------------------------------------------------------------------

@UseMagic:
    bset.l  #OF_SPECIAL, d2             ; Start action
    move.w  #DOPPLE_ATTACK, OBJ_TIMER(a0)
    
    moveq   #0, d7                      ; Set time before next use of magic
    move.b  OBJ_HEALTH(a0), d7
    lsl.w   #4, d7
    add.w   #$60, d7
    move.w  d7, (DoppleMagicTimer)
    
    move.w  d0, d7                      ; Spawn a ghost right away
    move.w  d1, d6
    sub.w   #$10, d6
    moveq   #OBJTYPE_ACTGHOST, d5
    bsr     AddObject
    clr.w   OBJ_XSPEED(a6)
    move.w  #-$600, OBJ_YSPEED(a6)
    moveq   #SFX_DARKMAGIC, d7
    jsr     (PlaySFX).w

@InMagic:
    subq.w  #1, OBJ_TIMER(a0)           ; Keep waiting?
    bne.s   @MagicGoing
    bclr.l  #OF_SPECIAL, d2
@MagicGoing:
    
    move.b  #PA_MAGIC, (DopplePose)     ; Set up pose

;----------------------------------------------------------------------------

@ActionDone:
    tst.w   (DoppleMagicTimer)          ; Keep waiting before using magic
    beq.s   @MagicComingSoon
    subq.w  #1, DoppleMagicTimer
@MagicComingSoon:
    
    btst.l  #OF_DISABLED, d2            ; Recoiling from getting hurt?
    beq.s   @DidntGetHurt
    move.b  #PA_HURT, (DopplePose)
    bra.s   @CantGetHurt
@DidntGetHurt:
    tst.w   (DoppleMercy)               ; Reduce mercy time if it's in force
    beq.s   @NoMercyTimer
    subq.w  #1, (DoppleMercy)
@NoMercyTimer:
    
    tst.b   OBJ_HEALTH(a0)              ; Are we even still alive?
    beq.s   @CantGetHurt
    tst.w   (DoppleMercy)               ; Can we get hurt yet?
    bne.s   @CantGetHurt
    
    btst.l  #OF_DISABLED, d2            ; Did we get hurt?
    bne.s   @CantGetHurt
    move.l  a0, a6
    bsr     CollidesAttack
    tst.w   d7
    beq.s   @CantGetHurt
    
    moveq   #SFX_HIT, d7                ; Ouch!
    jsr     (PlaySFX).w
    
    move.l  a0, a6                      ; Recoil
    bsr     FacePlayer
    move.b  OBJ_FLAGS(a0), d2
    move.w  #RECOIL_SPEED, d7
    btst.l  #OF_DIR, d2
    bne.s   *+4
    neg.w   d7
    move.w  d7, OBJ_XSPEED(a0)
    move.w  #-RECOIL_FORCE, OBJ_YSPEED(a0)
    
    subq.b  #1, OBJ_HEALTH(a0)          ; Lose some health
    bset.l  #OF_DISABLED, d2            ; We're stunned!
    bclr.l  #OF_ACTIVE, d2
    bclr.l  #OF_SPECIAL, d2
    clr.w   OBJ_TIMER(a0)
@CantGetHurt:
    
    cmp.w   #$B0, d1                    ; Landed already?
    blt.s   @DidntLand
    tst.w   OBJ_YSPEED(a0)
    blt.s   @DidntLand
    move.w  #$B0, d1
    clr.w   OBJ_YSPEED(a0)
    
    btst.l  #OF_DISABLED, d2
    beq.s   @DidntLand
    bclr.l  #OF_DISABLED, d2
    move.w  #DOPPLE_FLASH, (DoppleMercy)
@DidntLand:
    
    move.w  d0, OBJ_X(a0)               ; Store new status
    move.w  d1, OBJ_Y(a0)
    move.b  d2, OBJ_FLAGS(a0)

;----------------------------------------------------------------------------

    moveq   #0, d7                      ; Did the animation change? (we need
    move.b  (DopplePose), d7              ; to start the new one if so)
    cmp.b   (DoppleOldPose), d7
    beq.s   @SamePose
    move.b  d7, (DoppleOldPose)
    add.w   d7, d7
    add.w   d7, d7
    lea     (PlayerPoseList), a6
    move.l  (a6,d7.w), (DoppleAnimNext)
    move.w  #1, (DoppleAnimLen)
@SamePose:
    
    subq.w  #1, (DoppleAnimLen)         ; Update the animation if needed
    bne.s   @NoAnimUpdate
    move.l  (DoppleAnimNext), a6
    move.l  (a6)+, (DoppleMapping)
    move.l  (a6)+, (DoppleGfxAddr)
    move.w  (a6)+, (DoppleGfxSize)
    move.w  (a6)+, (DoppleAnimLen)
    move.l  (a6)+, (DoppleAnimNext)
@NoAnimUpdate:
    
    move.b  OBJ_HEALTH(a0), d7          ; Update boss meter
    add.b   d7, d7
    move.b  d7, (BossHealth)
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawDoppleganger
; Draws the Merlina doppleganger.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawDoppleganger:
    move.l  (DoppleGfxAddr), d7         ; Load new graphics if needed
    move.w  (DoppleGfxSize), d6
    beq.s   @SpriteLoaded
    move.l  (DMABufEnd), a6
    DMA2VRAM_SL d7, VramDoppleganger*$20, d6, a6
    move.l  a6, (DMABufEnd)
    clr.w   (DoppleGfxSize)
@SpriteLoaded:
    
    tst.w   (DoppleMercy)               ; Flashing?
    bne.s   @DoBlink
    tst.b   OBJ_HEALTH(a0)              ; Vanishing?
    bne.s   @NoBlink
    cmp.w   #$40, OBJ_TIMER(a0)
    blo.s   @NoBlink
@DoBlink:
    tst.b   (BlinkFlag)
    beq.s   @NoBlink
    rts
@NoBlink:
    
    move.w  #$6000+VramDoppleganger, d2   ; Check which way the doppleganger
    btst.b  #OF_DIR, OBJ_FLAGS(a0)          ; is facing
    beq.s   @NotFlipped
    or.w    #$0800, d2
@NotFlipped:
    
    move.w  OBJ_X(a0), d0               ; Draw doppleganger's sprite
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    move.l  (DoppleMapping), a6
    jsr     (AddMetasprite).w
    
    rts                                 ; End of subroutine

;****************************************************************************
; InitPushLimit
; Sets up the object that restores the camera limit.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitPushLimit:
    move.w  (CameraRight), OBJ_X(a6)    ; Current limit
    
    moveq   #0, d7                      ; Intended limit
    move.b  (MapWidth), d7
    lsl.w   #5, d7
    sub.w   #320, d7
    move.w  d7, OBJ_Y(a6)
    
    rts                                 ; End of subroutine

;****************************************************************************
; RunPushLimit
; Code for the object that restores the camera limit.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunPushLimit:
    move.w  OBJ_X(a0), d0               ; Current limit
    move.w  OBJ_Y(a0), d1               ; Intended limit
    
    addq.w  #4, d0                      ; Push the limit forwards
    move.w  d0, OBJ_X(a0)
    move.w  d0, (CameraRight)
    
    cmp.w   d1, d0                      ; Got to the new limit?
    beq     DestroySelf
    
    rts                                 ; End of subroutine
