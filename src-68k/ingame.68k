;****************************************************************************
; GS_*
; Possible states the game may have (see GameState)
;****************************************************************************

                    rsreset
GS_PAUSE:           rs.b 0              ; Game is paused
GS_PAUSED:          rs.b 1              ; In case of typos...

;****************************************************************************
; StartGame
; Sets up the game before starting.
;----------------------------------------------------------------------------
; notes: doesn't return (use BRA/JMP instead of BSR/JSR)
;****************************************************************************

StartGame:
    move.b  #$03, (Lives)               ; Initial amount of lives
    clr.l   (Score)                     ; Initial score
    clr.b   (Stage)                     ; Initial stage
    move.b  #3, (PlayerHealth)          ; Start with full health
    clr.w   (Supermagic)                ; No supermagic yet
    
    moveq   #0, d6                      ; Determine when first 1up is awarded
    move.b  (Difficulty), d6
    add.w   d6, d6
    add.w   d6, d6
    lea     (ExtraLifeList), a6
    move.l  (a6,d6.w), (NextLife)
    
    moveq   #0, d7                      ; Get control scheme
    move.b  (ControlSet), d7
    add.w   d7, d7
    add.w   d7, d7
    lea     (SchemeList), a0
    lea     (a0,d7.w), a0
    
    lea     (MagicButton), a6           ; Map scheme to buttons
    move.b  (a0)+, d7
    move.b  #6, (a6,d7.w)
    move.b  (a0)+, d7
    move.b  #4, (a6,d7.w)
    move.b  (a0)+, d7
    move.b  #5, (a6,d7.w)
    
    if      DEBUG_MENU                  ; Invoke the debug menu if enabled
    bsr     DebugMenu
    endc
    
    btst.b  #CH_LIVES, (Cheats)         ; Infinite lives enabled?
    beq.s   @NoInfiniteLives
    move.b  #$99, (Lives)
@NoInfiniteLives:
    
    ;moveq   #BGM_INGAME, d7             ; Start playing the main theme :)
    ;jsr     (PlayBGM).w
    
    ; Fall through to InGame...

;****************************************************************************
; InGame
; Main loop for the in-game mode.
;----------------------------------------------------------------------------
; notes: doesn't return (use BRA/JMP instead of BSR/JSR)
;****************************************************************************

InGame:
    tst.b   (PlayerHealth)              ; Respawning? (i.e. lost a life)
    bne.s   @NotRespawning
    move.b  #3, (PlayerHealth)
    bsr     RemoveLife
    
    tst.b   (Lives)                     ; Game over? D:
    beq     GameOver
@NotRespawning:
    
    bclr.b  #CH_FREEMOVE, (Cheats)      ; Because for some reason this breaks
                                          ; everything when loading a level,
                                          ; there isn't much reason to keep
                                          ; it on so let's just clear it
    
    jsr     (ResetVideo).w              ; Reset video status
    st.b    (WantsFade)                 ; We want fading in
    
    lea     (GfxTileset), a6            ; Load tileset graphics
    lea     (LocalRAM), a5
    jsr     (DecompressSlz).w
    DMA2VRAM LocalRAM, VramTileset*$20, 150*$20, ($C00004)
    
    lea     (GfxIngame), a6             ; Load common graphics
    lea     (LocalRAM), a5
    jsr     (DecompressSlz).w
    DMA2VRAM LocalRAM, VramHUDHealth*$20, 243*$20, ($C00004)
    
    lea     (GfxEnemies), a6            ; Load enemy graphics
    lea     (LocalRAM), a5
    jsr     (DecompressSlz).w
    DMA2VRAM LocalRAM, VramSpikeball*$20, 168*$20, ($C00004)
    
    move.b  #%0, (GameState)            ; Initialize game state
    bsr     InitStage                   ; Set up current stage
    bsr     InitPlayer                  ; Initialize player

;----------------------------------------------------------------------------

@MainLoop:
    btst.b  #7, (JoyPress)              ; Press Start to toggle pause
    beq.s   @NoPauseToggle
    bchg.b  #GS_PAUSED, (GameState)
    moveq   #SFX_PAUSE, d7
    jsr     (PlaySFX).w
@NoPauseToggle:
    
    btst.b  #GS_PAUSED, (GameState)     ; Execute game logic
    bne.s   @Paused
    lea     (@Logic), a0
    jsr     (DoLogic).w
    bra.s   @NotPaused
    
@Paused:
    move.b  (JoyHold), d7               ; Reset game by pressing A+B+C while
    and.b   #$70, d7                      ; the game is paused
    cmp.b   #$70, d7
    bne.s   @NotResetting
    jsr     (FadeOut).w
    bra     TitleScreen
@NotResetting:
    
    if      DEBUG_CONTROLS
    btst.b  #0, (JoyPress)              ; Press Up and Down to select a stage
    beq.s   @NoDebugNext                  ; (when the stage is restarted)
    addq.b  #1, (Stage)
@NoDebugNext:
    btst.b  #1, (JoyPress)
    beq.s   @NoDebugPrev
    subq.b  #1, (Stage)
@NoDebugPrev
    
    btst.b  #6, (JoyPress)              ; Press A to restart the stage
    beq.s   @NoDebugSkip                  ; Pressing Up and Down will change
    move.b  (Stage), d7                   ; the current stage, a restart is
    bra     SwitchStage                   ; needed for it to take effect
@NoDebugSkip:
    
    btst.b  #4, (JoyPress)              ; Press B to toggle free move
    beq.s   @NoFreeMove
    bchg.b  #CH_FREEMOVE, (Cheats)
@NoFreeMove:
    endc
    
@NotPaused:
    jsr     (ClearSprites).w            ; Draw everything
    bsr     ScrollStage
    bsr     DrawHUD
    bsr     DrawPlayer
    bsr     DrawAllObjects
    bsr     UpdateStageAnim
    jsr     (SortSprites).w
    bsr     SplitWater
    
    if      DEBUG_HUD                   ; Store CPU usage so it can be
    st.b    (LastUsage)                   ; displayed the next time
    btst.b  #3, ($C00004)
    bne.s   @UsageNotReliable
    move.b  ($C00008), (LastUsage)
@UsageNotReliable:
    endc
    
    jsr     (NextFrame).w               ; Wait for next frame
    bsr     SetupWater
    bra     @MainLoop

;----------------------------------------------------------------------------

@Logic:
    bsr     RunPlayer                   ; Update player
    bsr     RunAllObjects               ; Update all objects
    
    tst.w   (QuakeTimer)                ; Update quakes
    beq.s   @NoQuake
    subq.w  #1, (QuakeTimer)
@NoQuake:
    
    rts                                 ; Return back to loop...

;****************************************************************************
; AddScore
; Adds score to the player.
;----------------------------------------------------------------------------
; input d7.l ... Amount to award (BCD)
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

AddScore:
    move.l  (Score), d6                 ; Get current score
    
    and.b   #$00, ccr                   ; Add the score (gotta hate how BCD
    abcd.b  d7, d6                        ; only comes in byte flavor)
    ror.l   #8, d7
    ror.l   #8, d6
    abcd.b  d7, d6
    ror.l   #8, d7
    ror.l   #8, d6
    abcd.b  d7, d6
    ror.l   #8, d7
    ror.l   #8, d6
    abcd.b  d7, d6
    
    bcc.s   @NoOverflow                 ; Make sure to check for overflow
    move.l  #$99999999, d6
@NoOverflow:
    
    ror.l   #8, d6                      ; Put digits back into place
    move.l  d6, (Score)                 ; Store updated score
    
    move.l  (NextLife), d7              ; Award an 1up?
    cmp.l   d7, d6
    blo.s   @No1up
    
    moveq   #0, d6                      ; Calculate when next life is awarded
    move.b  (Difficulty), d6
    add.w   d6, d6
    add.w   d6, d6
    lea     (ExtraLifeList), a6
    move.l  (a6,d6.w), d6
    
    and.b   #$00, ccr                   ; Again, I wish BCD worked on long...
    abcd.b  d7, d6                        ; Note that on overflow this will
    ror.l   #8, d7                        ; set the value to $FFFFFFFF (an
    ror.l   #8, d6                        ; invalid BCD value) The comparison
    abcd.b  d7, d6                        ; doesn't care if the values are
    ror.l   #8, d7                        ; BCD or not so this works (also
    ror.l   #8, d6                        ; how did you get to this point,
    abcd.b  d7, d6                        ; anyway?)
    ror.l   #8, d7
    ror.l   #8, d6
    abcd.b  d7, d6
    bcc.s   @No1upOverflow
    moveq   #-1, d6
@No1upOverflow:
    ror.l   #8, d6
    move.l  d6, (NextLife)
    
    bsr     AddLife                     ; Now award the life :)
    
@No1up:
    rts                                 ; End of subroutine

;****************************************************************************
; AddLife
; Awards an extra life to the player.
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

AddLife:
    moveq   #SFX_1UP, d7                ; Jingle!
    jsr     (PlaySFX).w
    
    move.b  (Lives), d7                 ; Get current lives
    
    moveq   #$01, d6                    ; Add one :)
    and.b   #$00, ccr
    abcd.b  d6, d7
    
    bcc.s   @NoOverflow                 ; Make sure to check for overflow
    move.b  #$99, d7
@NoOverflow:
    
    move.b  d7, (Lives)                 ; Store new lives count
    rts                                 ; End of subroutine

;****************************************************************************
; RemoveLife
; Reduces lives by 1 :(
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

RemoveLife:
    btst.b  #CH_LIVES, (Cheats)         ; Don't mess with infinite lives...
    beq.s   @NoInfiniteLives
    rts
@NoInfiniteLives:
    
    move.b  (Lives), d7                 ; Reduce lives count by one
    moveq   #$01, d6                      ; No overflow check because going
    and.b   #$00, ccr                     ; to 0 will result in a game over
    sbcd.b  d6, d7
    move.b  d7, (Lives)
    
    rts                                 ; End of subroutine
