;****************************************************************************
; InitNoParallax
; Initialization when there's no parallax.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitNoParallax:
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateNoParallax
; Update function when there's no parallax.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateNoParallax:
    move.w  (CameraX), d7               ; Update the camera position
    move.w  (CameraY), d6
    neg.w   d7
    move.w  d7, (HScrollABuf)
    move.w  d6, (VScrollABuf)
    
    move.l  (DMABufEnd), a6             ; Set up DMA to load the scrolling
    DMA2VRAM HScrollABuf, $F800, 2, (a6)+
    DMA2VRAM HScrollBBuf, $F802, 2, (a6)+
    DMA2VSRAM VScrollABuf, $0000, 2, (a6)+
    DMA2VSRAM VScrollBBuf, $0002, 2, (a6)+
    move.l  a6, (DMABufEnd)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateNoParallaxSwap
; Like UpdateNoParallax, but swaps planes A and B.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateNoParallaxSwap:
    move.w  (CameraX), d7               ; Update the camera position
    move.w  (CameraY), d6
    neg.w   d7
    move.w  d7, (HScrollABuf)
    move.w  d6, (VScrollABuf)
    
    move.l  (DMABufEnd), a6             ; Set up DMA to load the scrolling
    DMA2VRAM HScrollABuf, $F802, 2, (a6)+
    DMA2VRAM HScrollBBuf, $F800, 2, (a6)+
    DMA2VSRAM VScrollABuf, $0002, 2, (a6)+
    DMA2VSRAM VScrollBBuf, $0000, 2, (a6)+
    move.l  a6, (DMABufEnd)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdatePerCellParallax
; Like UpdateNoParallax, but when hscroll is set to per-cell.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdatePerCellParallax:
    lea     (HScrollABuf), a6           ; Update horizontal position
    move.w  (CameraX), d7
    neg.w   d7
    moveq   #28/4-1, d6
@HLoop:
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    dbf     d6, @HLoop
    
    move.w  (CameraY), (VScrollABuf)    ; Update vertical position
    
    move.l  (DMABufEnd), a6             ; Set up DMA to load the scrolling
    move.w  #$8F20, (a6)+
    DMA2VRAM HScrollABuf, $F800, 2*28, (a6)+
    DMA2VRAM HScrollBBuf, $F802, 2*28, (a6)+
    move.w  #$8F02, (a6)+
    DMA2VSRAM VScrollABuf, $0000, 2, (a6)+
    DMA2VSRAM VScrollBBuf, $0002, 2, (a6)+
    move.l  a6, (DMABufEnd)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdatePerLineParallax
; Like UpdateNoParallax, but when hscroll is set to per-line.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdatePerLineParallax:
    lea     (HScrollABuf), a6           ; Update horizontal position
    move.w  (CameraX), d7
    neg.w   d7
    moveq   #224/8-1, d6
@HLoop:
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    move.w  d7, (a6)+
    dbf     d6, @HLoop
    
    move.w  (CameraY), (VScrollABuf)    ; Update vertical position
    
    move.l  (DMABufEnd), a6             ; Set up DMA to load the scrolling
    move.w  #$8F04, (a6)+
    DMA2VRAM HScrollABuf, $F800, 2*224, (a6)+
    DMA2VRAM HScrollBBuf, $F802, 2*224, (a6)+
    move.w  #$8F02, (a6)+
    DMA2VSRAM VScrollABuf, $0000, 2, (a6)+
    DMA2VSRAM VScrollBBuf, $0002, 2, (a6)+
    move.l  a6, (DMABufEnd)
    
    rts                                 ; End of subroutine

;****************************************************************************
; InitFogParallax
; Initialization when there's fog outside the castle.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitFogParallax:
    lea     (GfxFog), a6                ; Decompress graphics
    lea     (FreeRAM), a5
    jsr     (DecompressSLZ).w
    
    lea     (FreeRAM), a6               ; Load fog graphics
    move.w  #$A000+VramFog, d7
    jsr     (LoadPlaneB).w
    DMA2VRAM FreeRAM+$1000, VramFog*$20, 7*$20, ($C00004)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateFogParallax
; Update function when there's fog outside the castle.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateFogParallax:
    move.w  (Anim), d7                  ; Determine position of the fog
    add.w   d7, d7                        ; Fog scrolls at the same ratio as
    add.w   (CameraX), d7                 ; the foreground, but also is
    move.w  (CameraY), d6                 ; constantly moving to the left
    neg.w   d7
    move.w  d7, (HScrollBBuf)
    move.w  d6, (VScrollBBuf)
    
    bra     UpdateNoParallax            ; Update camera as usual

;****************************************************************************
; InitRisingLavaParallax
; Initialization for the rising lava tilemap code.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitRisingLavaParallax:
    move.w  #$8B03, ($C00004)           ; We want linescrolling (so we can
                                          ; animate the lava's inside)
    
    lea     @Pattern(pc), a0            ; Unroll the lava pattern rows into
    lea     (LavaPattern), a6             ; RAM (which will make it easier to
    moveq   #(2+8)*2-1, d7                ; get them DMA'd and not have us
@FillPattern:                             ; worry about 128KB boundaries)
    move.l  (a0)+, d0
    move.l  (a0)+, d1
    rept    $40/4
    move.l  d0, (a6)+
    move.l  d1, (a6)+
    endr
    dbf     d7, @FillPattern
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Pattern:
    dc.w    $C000+VramRisingLava, $C001+VramRisingLava
    dc.w    $C002+VramRisingLava, $C003+VramRisingLava
    dc.w    $C004+VramRisingLava, $C005+VramRisingLava
    dc.w    $C006+VramRisingLava, $C007+VramRisingLava
    dcb.w   8, $0000
    
    dcb.w   4, $0000
    dc.w    $C008+VramRisingLava, $C009+VramRisingLava
    dc.w    $C00A+VramRisingLava, $C00B+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C00C+VramRisingLava, $C00D+VramRisingLava
    dc.w    $C00E+VramRisingLava, $C00F+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C010+VramRisingLava, $C011+VramRisingLava
    dc.w    $C012+VramRisingLava, $C013+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C014+VramRisingLava, $C015+VramRisingLava
    dc.w    $C016+VramRisingLava, $C017+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C809+VramRisingLava, $C808+VramRisingLava
    dc.w    $C80B+VramRisingLava, $C80A+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C80D+VramRisingLava, $C80C+VramRisingLava
    dc.w    $C80F+VramRisingLava, $C80E+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C811+VramRisingLava, $C810+VramRisingLava
    dc.w    $C813+VramRisingLava, $C812+VramRisingLava
    dcb.w   4, $0000
    dc.w    $C815+VramRisingLava, $C814+VramRisingLava
    dc.w    $C817+VramRisingLava, $C816+VramRisingLava

;****************************************************************************
; UpdateRisingLavaParallax
; Update function for the rising lava tilemap code.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateRisingLavaParallax:
    move.w  (Anim), d7                  ; Animate the top of the lava
    and.w   #$07<<2, d7
    lsl.w   #8-2, d7
    lea     (LavaTopPattern), a6
    lea     (a6,d7.w), a6
    move.l  a6, d7
    move.l  (DMABufEnd), a6
    DMA2VRAM_S d7, $E000, $40*2*2, a6
    move.l  a6, (DMABufEnd)
    
    move.w  (LavaPos), d0               ; Determine height of lava on screen
    sub.w   (CameraY), d0
    
    cmp.w   #-32, d0                    ; Ensure lava doesn't go outbounds
    bge.s   @NotTooHigh                   ; on screen
    and.w   #$0F, d0
    sub.w   #$20, d0
@NotTooHigh:
    cmp.w   #224, d0
    ble.s   @NotTooLow
    move.w  #224, d0
@NotTooLow:
    
    move.w  (LavaScreenPos), d6         ; Check if we need to write a new
    move.w  d0, (LavaScreenPos)           ; row?
    move.w  d0, d7
    and.w   #$FFF0, d6
    and.w   #$FFF0, d7
    cmp.w   d6, d7
    beq     @NoRowUpdate
    bgt     @RemoveRow
    
    lsr.w   #4, d7                      ; Which row to draw?
    neg.w   d7
    add.w   #14, d7
    
    lsl.w   #8, d7                      ; Draw the row!
    add.w   #$E000, d7
    move.l  (DMABufEnd), a6
    DMA2VRAM_D LavaPattern, d7, $40*2*2, a6
    move.l  a6, (DMABufEnd)
    bra.s   @NoRowUpdate
    
@RemoveRow:
    lsr.w   #4, d7                      ; Which row to erase?
    neg.w   d7
    add.w   #14+1, d7
    
    lsl.w   #8, d7                      ; Erase the row!
    add.w   #$E000, d7
    move.l  (DMABufEnd), a6
    DMA2VRAM_D LavaNoPattern, d7, $40*2*2, a6
    move.l  a6, (DMABufEnd)
    
@NoRowUpdate:
    neg.w   d0                          ; Store height
    move.w  d0, (VScrollBBuf)
    
    move.w  (CameraX), d0               ; Determine horizontal scrolling
    neg.w   d0                            ; used by the lava
    move.w  d0, d1
    add.w   #$10, d1
    
    lea     (HScrollBBuf), a6           ; Set hscroll for the top of the lava
    move.w  #224-1, d7
    move.w  (LavaScreenPos), d6
    add.w   #$10, d6
    blt.s   @NoHLoop1
@HLoop1:
    move.w  d0, (a6)+
    subq.w  #1, d7
    dbf     d6, @HLoop1
@NoHLoop1:
    
    tst.w   d7                          ; Do waviness for the lava inside
    blt.s   @NoHLoop2
    move.w  d6, d4
    lsl.w   #2, d6
    add.w   (Anim), d6
    lsl.w   #2+1, d6
    lea     (Sines), a5
    btst.l  #3, d4
    bne.s   @NoPreshift
    exg.l   d0, d1
@NoPreshift:
    addq.w  #1, d4
@HLoop2:
    and.w   #$FF<<1, d6
    move.w  (a5,d6.w), d5
    asr.w   #6, d5
    add.w   d0, d5
    move.w  d5, (a6)+
    sub.w   #$10<<1, d6
    subq.w  #1, d4
    and.w   #$07, d4
    bne.s   @NoShift
    exg.l   d0, d1
@NoShift:
    dbf     d7, @HLoop2
@NoHLoop2:
    
    bra     UpdatePerLineParallax       ; Update camera as usual

;****************************************************************************
; InitLavaFloodParallax
; Initialization for the lava flood tilemap code.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitLavaFloodParallax:
    lea     @Pattern(pc), a0            ; Unroll the lava pattern rows into
    lea     (LavaPattern), a6             ; RAM (which will make it easier to
    moveq   #4-1, d7                      ; get them DMA'd and not have us
@FillPattern:                             ; worry about 128KB boundaries)
    move.l  (a0)+, d0
    move.l  (a0)+, d1
    move.l  d0, (a6)+
    move.l  d1, (a6)+
    move.l  d0, (a6)+
    move.l  d1, (a6)+
    dbf     d7, @FillPattern
    
    moveq   #0, d0
    moveq   #4-1, d7
    lea     (LavaNoPattern), a6
@FillNoPattern:
    move.l  d0, (a6)+
    move.l  d0, (a6)+
    move.l  d0, (a6)+
    move.l  d0, (a6)+
    dbf     d7, @FillNoPattern
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Pattern:
    dc.w    $C000+VramRisingLava, $C004+VramRisingLava
    dc.w    $C801+VramRisingLava, $C805+VramRisingLava
    dc.w    $C001+VramRisingLava, $C005+VramRisingLava
    dc.w    $C800+VramRisingLava, $C804+VramRisingLava
    dc.w    $C002+VramRisingLava, $C006+VramRisingLava
    dc.w    $C803+VramRisingLava, $C807+VramRisingLava
    dc.w    $C003+VramRisingLava, $C007+VramRisingLava
    dc.w    $C802+VramRisingLava, $C806+VramRisingLava

;****************************************************************************
; UpdateLavaFloodParallax
; Update function for the lava flood tilemap code.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateLavaFloodParallax:
    move.w  (LavaPos), d0               ; Determine position on screen
    sub.w   (CameraX), d0
    bge.s   @NotTooLeft
    moveq   #0, d0
@NotTooLeft:
    cmp.w   #352, d0
    blt.s   @NotTooRight
    and.w   #$1F, d0
    add.w   #352, d0
@NotTooRight:
    move.w  d0, (HscrollBBuf)
    add.w   #$20, d0
    move.w  (CameraY), d7
    neg.w   d7
    move.w  d7, (VScrollBBuf)
    
    move.w  (LavaScreenPos), d1         ; Check if we have to update the
    move.w  d0, (LavaScreenPos)           ; lava body (the tilemap)
    and.w   #$FFE0, d1
    and.w   #$FFE0, d0
    cmp.w   d1, d0
    beq     @NoUpdate
    ble     @Erase
    
@Draw:
    lsr.w   #2, d0                      ; Determine addresses of columns
    not.w   d0                            ; to draw
    and.w   #$3F<<1, d0
    add.w   #$E400, d0
    move.w  d0, d1
    move.w  d0, d2
    move.w  d0, d3
    addq.w  #2, d1
    addq.w  #4, d2
    addq.w  #6, d3
    
    move.l  (DMABufEnd), a6             ; Get it drawn on the tilemap
    move.w  #$8F80, (a6)+
    DMA2VRAM_D LavaPattern+$00, d0, 8*2, a6
    DMA2VRAM_D LavaPattern+$10, d1, 8*2, a6
    DMA2VRAM_D LavaPattern+$20, d2, 8*2, a6
    DMA2VRAM_D LavaPattern+$30, d3, 8*2, a6
    move.w  #$8F02, (a6)+
    move.l  a6, (DMABufEnd)
    bra     @NoUpdate
    
@Erase:
    lsr.w   #2, d1                      ; Determine addresses of columns
    not.w   d1                            ; to erase
    and.w   #$3F<<1, d1
    add.w   #$E400, d1
    move.w  d1, d0
    move.w  d1, d2
    move.w  d1, d3
    addq.w  #2, d1
    addq.w  #4, d2
    addq.w  #6, d3
    
    move.l  (DMABufEnd), a6             ; Get it erased on the tilemap
    move.w  #$8F80, (a6)+
    DMA2VRAM_D LavaNoPattern+$00, d0, 8*2, a6
    DMA2VRAM_D LavaNoPattern+$10, d1, 8*2, a6
    DMA2VRAM_D LavaNoPattern+$20, d2, 8*2, a6
    DMA2VRAM_D LavaNoPattern+$30, d3, 8*2, a6
    move.w  #$8F02, (a6)+
    move.l  a6, (DMABufEnd)
    
@NoUpdate:
    bra     UpdateNoParallax            ; Update camera as usual

;****************************************************************************
; InitWallParallax
; Initialization for the moving wall graphics.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitWallParallax:
    move.w  #$823C, ($C00004)           ; Swap planes A and B
    move.w  #$8406, ($C00004)
    
    clr.w   (WallPos)                   ; Init scrolling
    clr.w   (WallScreenPos)
    
    lea     ($C00004), a0               ; VDP control port
    lea     ($C00000), a1               ; VDP data port
    SetPosB 60, 0, d0                   ; Initial address
    move.l  #$80<<16, d1                ; Offset per row
    
    moveq   #8-1, d6                    ; Copy graphics into the rightmost
@Loop2:                                   ; column of the parallax plane
    lea     @Table(pc), a6
    moveq   #4-1, d7
@Loop1:
    move.l  d0, (a0)
    move.l  (a6)+, (a1)
    move.l  (a6)+, (a1)
    add.l   d1, d0
    dbf     d7, @Loop1
    dbf     d6, @Loop2
    
    lea     (WallPattern), a5           ; Set up pattern for inner columns
    lea     @Table2(pc), a6
    moveq   #4-1, d7
@PatternLoop:
    move.l  (a6)+, d6
    move.l  (a6)+, d5
    rept    8
    move.l  d6, (a5)+
    move.l  d5, (a5)+
    endr
    dbf     d7, @PatternLoop
    
    moveq   #0, d6                      ; Set up pattern for blank columns
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    move.l  d6, (a5)+
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@T: equ VramTileset

@Table:
    dc.w    @T+$C000, @T+$C001, @T+$C002, @T+$C003
    dc.w    @T+$C004, @T+$C005, @T+$C006, @T+$C007
    dc.w    @T+$C002, @T+$C003, @T+$C008, @T+$C009
    dc.w    @T+$C006, @T+$C007, @T+$C00A, @T+$C00B
    
@Table2:
    dc.w    @T+$C000, @T+$C004, @T+$C002, @T+$C006
    dc.w    @T+$C001, @T+$C005, @T+$C003, @T+$C007
    dc.w    @T+$C002, @T+$C006, @T+$C000, @T+$C004
    dc.w    @T+$C003, @T+$C007, @T+$C001, @T+$C005

;****************************************************************************
; UpdateWallParallax
; Update function for the moving wall graphics.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateWallParallax:
    move.w  (WallPos), d0               ; Determine wall position on screen
    sub.w   (CameraX), d0
    bge.s   @NotTooLeft
    moveq   #0, d0
@NotTooLeft:
    cmp.w   #352+$20, d0
    blt.s   @NotTooRight
    and.w   #$1F, d0
    add.w   #352, d0
@NotTooRight:
    
    move.w  (WallScreenPos), d1         ; Check if a column has to be drawn
    move.w  d0, (WallScreenPos)
    move.w  d1, d7
    move.w  d0, d6
    lsr.w   #5, d7
    lsr.w   #5, d6
    cmp.w   d6, d7
    beq     @NoDraw
    bgt     @Clear

;----------------------------------------------------------------------------

@Draw:
    not.w   d7
    subq.w  #1, d7
    and.w   #$0F, d7
    lsl.w   #3, d7
    add.w   #$E000, d7
    move.w  d7, d6
    move.w  d7, d5
    move.w  d7, d4
    addq.w  #2, d6
    addq.w  #4, d5
    addq.w  #6, d4
    
    move.l  (DMABufEnd), a6
    move.w  #$8F80, (a6)+
    DMA2VRAM_D WallPattern+$00, d7, $20*2, a6
    DMA2VRAM_D WallPattern+$40, d6, $20*2, a6
    DMA2VRAM_D WallPattern+$80, d5, $20*2, a6
    DMA2VRAM_D WallPattern+$C0, d4, $20*2, a6
    move.w  #$8F02, (a6)+
    move.l  a6, (DMABufEnd)
    bra     @NoDraw

;----------------------------------------------------------------------------

@Clear:
    not.w   d7
    subq.w  #1, d7
    and.w   #$0F, d7
    lsl.w   #3, d7
    add.w   #$E000, d7
    move.w  d7, d6
    move.w  d7, d5
    move.w  d7, d4
    addq.w  #2, d6
    addq.w  #4, d5
    addq.w  #6, d4
    
    move.l  (DMABufEnd), a6
    move.w  #$8F80, (a6)+
    DMA2VRAM_D WallNoPattern, d7, $20*2, a6
    DMA2VRAM_D WallNoPattern, d6, $20*2, a6
    DMA2VRAM_D WallNoPattern, d5, $20*2, a6
    DMA2VRAM_D WallNoPattern, d4, $20*2, a6
    move.w  #$8F02, (a6)+
    move.l  a6, (DMABufEnd)

;----------------------------------------------------------------------------

@NoDraw:
    move.w  d0, (HScrollBBuf)           ; Update scroll
    move.w  (CameraY), (VScrollBBuf)
    bra     UpdateNoParallaxSwap

;****************************************************************************
; InitRooftopParallax
; Initialization for the rooftop background.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitRooftopParallax:
    move.w  #$8B02, ($C00004)           ; Set hscroll per cell
    
    lea     (GfxRooftopBG), a6          ; Decompress graphics
    lea     (FreeRAM), a5
    jsr     (DecompressSLZ).w
    
    lea     (FreeRAM), a6               ; Load pattern
    move.w  #$6000+VramRooftopBG, d7
    jsr     (LoadPlaneB).w
    DMA2VRAM FreeRAM+$C00, VramRooftopBG*$20, $C000-(VramRooftopBG*$20), ($C00004)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateRooftopParallax
; Updates the parallax of the rooftop background.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateRooftopParallax:
    move.w  (Anim), d0                  ; Determine position of the clouds
    neg.w   d0
    move.w  d0, d7
    add.w   d7, d0
    add.w   d7, d0
    move.w  d0, d1
    add.w   d7, d1
    move.w  d1, d2
    add.w   d7, d2
    move.w  d2, d3
    add.w   d7, d3
    move.w  d3, d4
    add.w   d7, d4
    move.w  d4, d5
    add.w   d7, d5
    asr.w   #2, d0
    asr.w   #2, d1
    asr.w   #2, d2
    asr.w   #2, d3
    asr.w   #2, d4
    asr.w   #2, d5
    
    lea     (HScrollBBuf), a0           ; Make the clouds move
    move.w  d5, (a0)+
    move.w  d5, (a0)+
    move.w  d5, (a0)+
    move.w  d4, (a0)+
    move.w  d4, (a0)+
    move.w  d3, (a0)+
    move.w  d3, (a0)+
    move.w  d2, (a0)+
    move.w  d2, (a0)+
    move.w  d1, (a0)+
    move.w  d1, (a0)+
    move.w  d0, (a0)+
    move.w  d0, (a0)+
    
    move.w  (CameraX), d0               ; Determine position of the mountains
    neg.w   d0                            ; and forest
    move.w  d0, d1
    asr.w   #1, d1
    add.w   d0, d1
    asr.w   #4, d0
    asr.w   #4, d1
    
    move.w  d0, (a0)+                   ; Scroll the mountains
    move.w  d0, (a0)+
    move.w  d0, (a0)+
    move.w  d0, (a0)+
    move.w  d0, (a0)+
    
    move.w  d1, (a0)+                   ; Scroll the forest
    move.w  d1, (a0)+
    move.w  d1, (a0)+
    move.w  d1, (a0)+
    
    clr.w   (VScrollBBuf)               ; Update scroll
    bra     UpdatePerCellParallax
