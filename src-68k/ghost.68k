;****************************************************************************
; Some parameters for tweaking the ghosts
;****************************************************************************

GHOST_FADE:         equ $20             ; How long it takes to fade in
GHOST_DIST:         equ $60             ; Distance at which it appears
GHOST_DEATH:        equ 30              ; Time it takes for a ghost to die

GHOST_HIDDEN:       equ 1               ; Should be hidden while inactive?

GHOST_X1:           equ -$0C            ; Left boundary of collision box
GHOST_Y1:           equ -$0C            ; Top boundary of collision box
GHOST_X2:           equ $0B             ; Right boundary of collision box
GHOST_Y2:           equ $0B             ; Bottom boundary of collision box

;****************************************************************************
; GhostAccel, GhostSpeed
; Acceleration rate and maximum speed for the ghosts for each difficulty
;****************************************************************************

GhostAccel:
    dc.w    $08, $10, $18
GhostSpeed:
    dc.w    $180, $200, $280

;****************************************************************************
; InitActiveGhost
; For ghosts that are supposed to react immediately.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitActiveGhost:
    move.b  #OBJTYPE_GHOST, OBJ_TYPE(a6)
    move.b  #GHOST_FADE, OBJ_TIMER(a6)

;****************************************************************************
; InitGhost
; Initializes a ghost's collision box.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitGhost:
    move.w  #GHOST_X1, OBJ_BOXX1(a6)
    move.w  #GHOST_Y1, OBJ_BOXY1(a6)
    move.w  #GHOST_X2, OBJ_BOXX2(a6)
    move.w  #GHOST_Y2, OBJ_BOXY2(a6)
    rts

;****************************************************************************
; RunGhost
; Executes the behavior for a ghost.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunGhost:
    tst.b   OBJ_HEALTH(a0)              ; Check what we're doing
    beq     @Dead
    move.w  OBJ_TIMER(a0), d7
    beq     @Waiting
    if      GHOST_HIDDEN
    cmp.w   #GHOST_FADE, d7
    bhs     @Chasing
    
    addq.w  #1, d7                      ; Still fading in, keep waiting
    move.w  d7, OBJ_TIMER(a0)
    rts
    
    else                                ; If we don't hide, just chase
    bra     @Chasing                      ; directly instead of waiting
    endc

;----------------------------------------------------------------------------

@Dead:
    move.w  OBJ_TIMER(a0), d0           ; Update animation
    subq.b  #1, d0
    beq     DestroySelf
    move.w  d0, OBJ_TIMER(a0)
    
    cmp.w   #GHOST_DEATH/2, d0          ; Still recoiling?
    blo.s   @NoRecoil
    move.w  OBJ_XSPEED(a0), d7
    move.w  OBJ_YSPEED(a0), d6
    add.w   (Subpixel), d7
    add.w   (Subpixel), d6
    asr.w   #8, d7
    asr.w   #8, d6
    add.w   d7, OBJ_X(a0)
    add.w   d6, OBJ_Y(a0)
    
@NoRecoil:
    rts                                 ; Still dying

;----------------------------------------------------------------------------

@Waiting:
    move.w  OBJ_X(a0), d0               ; Close enough horizontally?
    sub.w   (PlayerX), d0
    bpl.s   *+4
    neg.w   d0
    cmp.w   #GHOST_DIST, d0
    bgt.s   @TooFarYet
    
    move.w  OBJ_Y(a0), d0               ; Close enough vertically?
    sub.w   (PlayerY), d0
    bpl.s   *+4
    neg.w   d0
    cmp.w   #GHOST_DIST, d0
    bgt.s   @TooFarYet
    
    move.w  #1, OBJ_TIMER(a0)           ; Start fading in
    
@TooFarYet:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Chasing:
    move.w  OBJ_X(a0), d0               ; Get current status
    move.w  OBJ_Y(a0), d1
    move.w  OBJ_XSPEED(a0), d2
    move.w  OBJ_YSPEED(a0), d3
    move.b  OBJ_FLAGS(a0), d4
    
    moveq   #0, d7                      ; Get acceleration and maximum speed
    move.b  (Difficulty), d7
    add.w   d7, d7
    lea     GhostAccel(pc), a6
    move.w  (a6,d7.w), d6
    lea     GhostSpeed(pc), a6
    move.w  (a6,d7.w), d5
    
    move.w  d6, d7                      ; Where to go horizontally?
    cmp.w   (PlayerX), d0
    ble.s   *+4
    neg.w   d7
    add.w   d7, d2
    
    move.w  d6, d7                      ; Where to go vertically?
    cmp.w   (PlayerY), d1
    ble.s   *+4
    neg.w   d7
    add.w   d7, d3
    
    cmp.w   d5, d2                      ; Place in a speed cap
    ble.s   *+4
    move.w  d5, d2
    cmp.w   d5, d3
    ble.s   *+4
    move.w  d5, d3
    neg.w   d5
    cmp.w   d5, d2
    bge.s   *+4
    move.w  d5, d2
    cmp.w   d5, d3
    bge.s   *+4
    move.w  d5, d3
    
    move.w  d2, d7                      ; Apply momentum
    move.w  d3, d6
    add.w   (Subpixel), d7
    add.w   (Subpixel), d6
    asr.w   #8, d7
    asr.w   #8, d6
    add.w   d7, d0
    add.w   d6, d1
    
    bclr.l  #OF_DIR, d4                 ; Which direction are we facing?
    tst.w   d2
    bge.s   *+6
    bset.l  #OF_DIR, d4
    
    move.w  d0, OBJ_X(a0)               ; Store new status
    move.w  d1, OBJ_Y(a0)
    move.w  d2, OBJ_XSPEED(a0)
    move.w  d3, OBJ_YSPEED(a0)
    move.b  d4, OBJ_FLAGS(a0)

;----------------------------------------------------------------------------

    move.l  a0, a6                      ; Did we get caught by magic?
    move.w  d4, -(sp)
    bsr     CollidesMagic
    move.w  (sp)+, d4
    tst.w   d7
    beq.s   @NoMagic
    
    moveq   #SFX_TRANSFORM, d7          ; Stuff as usual
    jsr     (PlaySFX).w
    move.l  #SCORE_MAGIC, d7
    bsr     AddScore
    
    move.w  d0, d7                      ; Oh no! Transform!
    move.w  d1, d6
    moveq   #OBJTYPE_MAGICPUFF, d5
    bsr     AddObject
    move.b  d4, OBJ_FLAGS(a6)
    move.b  #OBJTYPE_ANGEL, OBJ_DATA(a6)
    
    bra     DestroySelf                 ; Puff!
@NoMagic:

;----------------------------------------------------------------------------

    move.l  a0, a6                      ; Did we get hit by the player?
    bsr     CollidesAttack
    tst.w   d7
    beq.s   @NotHurt
    
    clr.b   OBJ_HEALTH(a0)              ; Ouch!
    moveq   #SFX_HIT, d7                ; Stuff as usual
    jsr     (PlaySFX).w
    move.l  #SCORE_BROOM, d7
    bsr     AddScore
    
    move.l  a0, a6                      ; Ensure we face the player when we
    bsr     FacePlayer                    ; get hit (so we recoil in the
    move.b  d7, d4                        ; correct direction)
    move.w  #$300, d7
    btst.l  #OF_DIR, d4
    bne.s   *+4
    neg.w   d7
    move.w  d7, OBJ_XSPEED(a0)
    move.w  #-$300, OBJ_YSPEED(a0)
    
    move.w  #GHOST_DEATH, OBJ_TIMER(a0) ; Start recoil
    rts                                 ; End of subroutine
@NotHurt:

;----------------------------------------------------------------------------

    move.l  a0, a6                      ; Did we hit the player?
    bsr     CollidesPlayer
    tst.w   d7
    beq.s   @NoAttack
    move.w  d0, d7
    move.w  d1, d6
    bsr     HurtPlayer
@NoAttack:
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawGhost
; Draws a ghost.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawGhost:
    move.w  OBJ_X(a0), d0               ; Get sprite position on screen
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    tst.b   OBJ_HEALTH(a0)              ; Dying yet?
    bne.s   @StillAlive
    cmp.w   #GHOST_DEATH/2, OBJ_TIMER(a0)
    bhs.s   @Dying
    tst.b   (BlinkFlag)
    beq.s   @Hidden
    
@Dying:
    move.w  #$A01C+VramGhost, d2        ; Show the ghost recoiling
    lea     (SprGhost_1), a6
    btst.b  #OF_DIR, OBJ_FLAGS(a0)
    beq.s   *+6
    or.w    #$0800, d2
    jsr     (AddMetasprite).w
    rts
    
@StillAlive:
    if      GHOST_HIDDEN
    move.w  OBJ_TIMER(a0), d7           ; Check if we're fading or waiting
    beq.s   @Hidden
    cmp.w   #GHOST_FADE, d7
    bhs.s   @Chasing
    
    tst.b   (BlinkFlag)                 ; Blink while fading
    beq.s   @Hidden
    endc
    
@Chasing:
    move.w  #$A000+VramGhost, d2        ; Determine base tile ID
    btst.b  #OF_DIR, OBJ_FLAGS(a0)
    beq.s   *+6
    or.w    #$0800, d2
    
    move.w  (Anim), d7                  ; Get mapping to use
    and.w   #$01<<3, d7
    lsr.w   #1, d7
    lea     @Mappings(pc), a6
    move.l  (a6,d7.w), a6
    
    jsr     (AddMetasprite).w           ; Draw sprite
    
@Hidden:
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Mappings:
    dc.l    SprGhost_1
    dc.l    SprGhost_2

;****************************************************************************
; InitAngel
; Initializes a saved soul.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

InitAngel:
    move.w  #$40, OBJ_TIMER(a6)         ; How long does it last
    rts                                 ; End of subroutine

;****************************************************************************
; RunAngel
; Executes the behavior for a saved soul.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunAngel:
    subq.w  #1, OBJ_Y(a0)               ; Go upwards
    
    subq.w  #1, OBJ_TIMER(a0)           ; Disappear after a while
    beq     DestroySelf
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawAngel
; Draws a saved soul as it escapes.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

DrawAngel:
    cmp.w   #$10, OBJ_TIMER(a0)         ; Blink when about to vanish
    bhi.s   @NoBlink
    tst.b   (BlinkFlag)
    beq.s   @NoBlink
    rts
@NoBlink:
    
    move.w  OBJ_X(a0), d0               ; Get position on screen
    move.w  OBJ_Y(a0), d1
    sub.w   (CameraX), d0
    sub.w   (CameraY), d1
    
    move.w  OBJ_TIMER(a0), d7           ; Angel wobbles around
    and.w   #$3F, d7
    lsl.w   #2+1, d7
    lea     (Sines), a6
    move.w  (a6,d7.w), d7
    asr.w   #5, d7
    add.w   d7, d0
    
    move.w  (Anim), d7                  ; Get mapping to use
    and.w   #$01<<3, d7
    lsr.w   #1, d7
    lea     @Mappings(pc), a6
    move.l  (a6,d7.w), a6
    
    move.w  #$A000+VramAngel, d2        ; Draw angel
    jsr     (AddMetasprite).w
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Mappings:
    dc.l    SprAngel_1
    dc.l    SprAngel_2
